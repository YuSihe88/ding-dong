"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wechatifyImage = exports.Image = void 0;
/**
 *   Wechaty Chatbot SDK - https://github.com/wechaty/wechaty
 *
 *   @copyright 2016 Huan LI (李卓桓) <https://github.com/huan>, and
 *                   Wechaty Contributors <https://github.com/wechaty>.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const wechaty_puppet_1 = require("wechaty-puppet");
const guard_wechatify_class_js_1 = require("./guard-wechatify-class.js");
class Image {
    constructor(id) {
        this.id = id;
        wechaty_puppet_1.log.verbose('Image', 'constructor(%s)', id);
        guard_wechatify_class_js_1.guardWechatifyClass.call(this, Image);
    }
    static get wechaty() { return (0, guard_wechatify_class_js_1.throwWechatifyError)(this); }
    get wechaty() { return (0, guard_wechatify_class_js_1.throwWechatifyError)(this.constructor); }
    static create(id) {
        wechaty_puppet_1.log.verbose('Image', 'static create(%s)', id);
        const image = new this(id);
        return image;
    }
    async thumbnail() {
        wechaty_puppet_1.log.verbose('Image', 'thumbnail() for id: "%s"', this.id);
        const fileBox = await this.wechaty.puppet.messageImage(this.id, wechaty_puppet_1.ImageType.Thumbnail);
        return fileBox;
    }
    async hd() {
        wechaty_puppet_1.log.verbose('Image', 'hd() for id: "%s"', this.id);
        const fileBox = await this.wechaty.puppet.messageImage(this.id, wechaty_puppet_1.ImageType.HD);
        return fileBox;
    }
    async artwork() {
        wechaty_puppet_1.log.verbose('Image', 'artwork() for id: "%s"', this.id);
        const fileBox = await this.wechaty.puppet.messageImage(this.id, wechaty_puppet_1.ImageType.Artwork);
        return fileBox;
    }
}
exports.Image = Image;
function wechatifyImage(wechaty) {
    wechaty_puppet_1.log.verbose('Image', 'wechatifyImage(%s)', wechaty);
    class WechatifiedImage extends Image {
        static get wechaty() { return wechaty; }
        get wechaty() { return wechaty; }
    }
    return WechatifiedImage;
}
exports.wechatifyImage = wechatifyImage;
//# sourceMappingURL=image.js.map