"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _PuppetMock_instances, _PuppetMock_messageSend;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PuppetMock = void 0;
/**
 *   Wechaty - https://github.com/chatie/wechaty
 *
 *   @copyright 2016-2018 Huan LI <zixia@zixia.net>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const path_1 = __importDefault(require("path"));
const wechaty_puppet_1 = require("wechaty-puppet");
const config_js_1 = require("./config.js");
// import { Attachment } from './mock/user/types'
const mod_js_1 = require("./mock/mod.js");
class PuppetMock extends wechaty_puppet_1.Puppet {
    constructor(options = {}) {
        super(options);
        this.options = options;
        _PuppetMock_instances.add(this);
        wechaty_puppet_1.log.verbose('PuppetMock', 'constructor()');
        if (options.mocker) {
            wechaty_puppet_1.log.verbose('PuppetMock', 'constructor() use options.mocker');
            this.mocker = options.mocker;
        }
        else {
            wechaty_puppet_1.log.verbose('PuppetMock', 'constructor() creating the default mocker');
            this.mocker = new mod_js_1.Mocker();
            // this.mocker.use(SimpleBehavior())
        }
        this.mocker.puppet = this;
    }
    async start() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'start()');
        if (this.state.on()) {
            wechaty_puppet_1.log.warn('PuppetMock', 'start() is called on a ON puppet. await ready(on) and return.');
            await this.state.ready('on');
            return;
        }
        this.state.on('pending');
        // Do some async initializing tasks
        this.state.on(true);
        /**
         * Start mocker after the puppet fully turned ON.
         */
        setImmediate(() => this.mocker.start());
    }
    async stop() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'stop()');
        if (this.state.off()) {
            wechaty_puppet_1.log.warn('PuppetMock', 'stop() is called on a OFF puppet. await ready(off) and return.');
            await this.state.ready('off');
            return;
        }
        this.state.off('pending');
        if (this.loopTimer) {
            clearInterval(this.loopTimer);
        }
        this.mocker.stop();
        if (this.logonoff()) {
            await this.logout();
        }
        // await some tasks...
        this.state.off(true);
    }
    login(contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'login()');
        return super.login(contactId);
    }
    async logout() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'logout()');
        if (!this.id) {
            throw new Error('logout before login?');
        }
        this.emit('logout', { contactId: this.id, data: 'test' }); // before we will throw above by logonoff() when this.user===undefined
        this.id = undefined;
        // TODO: do the logout job
    }
    ding(data) {
        wechaty_puppet_1.log.silly('PuppetMock', 'ding(%s)', data || '');
        setTimeout(() => this.emit('dong', { data: data || '' }), 1000);
    }
    unref() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'unref()');
        super.unref();
        if (this.loopTimer) {
            this.loopTimer.unref();
        }
    }
    /**
     *
     * ContactSelf
     *
     *
     */
    async contactSelfQRCode() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactSelfQRCode()');
        return config_js_1.CHATIE_OFFICIAL_ACCOUNT_QRCODE;
    }
    async contactSelfName(name) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactSelfName(%s)', name);
    }
    async contactSelfSignature(signature) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactSelfSignature(%s)', signature);
    }
    async contactAlias(contactId, alias) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactAlias(%s, %s)', contactId, alias);
        if (typeof alias === 'undefined') {
            return 'mock alias';
        }
    }
    async contactPhone(contactId, phoneList) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactPhone(%s, %s)', contactId, phoneList);
        if (typeof phoneList === 'undefined') {
            return [];
        }
    }
    async contactCorporationRemark(contactId, corporationRemark) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactCorporationRemark(%s, %s)', contactId, corporationRemark);
    }
    async contactDescription(contactId, description) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactDescription(%s, %s)', contactId, description);
    }
    async contactList() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactList()');
        return [...this.mocker.cacheContactPayload.keys()];
    }
    async contactAvatar(contactId, file) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactAvatar(%s)', contactId);
        /**
         * 1. set
         */
        if (file) {
            return;
        }
        /**
         * 2. get
         */
        const WECHATY_ICON_PNG = path_1.default.resolve('../../docs/images/wechaty-icon.png');
        return wechaty_puppet_1.FileBox.fromFile(WECHATY_ICON_PNG);
    }
    async contactRawPayloadParser(payload) { return payload; }
    async contactRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'contactRawPayload(%s)', id);
        return this.mocker.contactPayload(id);
    }
    /**
     *
     * Conversation
     *
     */
    async conversationReadMark(conversationId, hasRead) {
        wechaty_puppet_1.log.verbose('PuppetService', 'conversationRead(%s, %s)', conversationId, hasRead);
    }
    /**
     *
     * Message
     *
     */
    async messageContact(messageId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageContact(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof ContactMock) {
        //   return attachment.id
        // }
        return '';
    }
    async messageImage(messageId, imageType) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageImage(%s, %s[%s])', messageId, imageType, wechaty_puppet_1.ImageType[imageType]);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof FileBox) {
        //   return attachment
        // }
        return wechaty_puppet_1.FileBox.fromQRCode('fake-qrcode');
    }
    async messageRecall(messageId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageRecall(%s)', messageId);
        return false;
    }
    async messageFile(id) {
        // const attachment = this.mocker.MockMessage.loadAttachment(id)
        // if (attachment instanceof FileBox) {
        //   return attachment
        // }
        return wechaty_puppet_1.FileBox.fromBase64('cRH9qeL3XyVnaXJkppBuH20tf5JlcG9uFX1lL2IvdHRRRS9kMMQxOPLKNYIzQQ==', 'mock-file' + id + '.txt');
    }
    async messageUrl(messageId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageUrl(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof UrlLink) {
        //   return attachment.payload
        // }
        return {
            title: 'mock title for ' + messageId,
            url: 'https://mock.url',
        };
    }
    async messageLocation(messageId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageLocation(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof MiniProgram) {
        //   return attachment.payload
        // }
        return {
            accuracy: 15,
            address: '北京市北京市海淀区45 Chengfu Rd',
            latitude: 39.995120999999997,
            longitude: 116.334154,
            name: '东升乡人民政府(海淀区成府路45号)',
        };
    }
    async messageMiniProgram(messageId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageMiniProgram(%s)', messageId);
        // const attachment = this.mocker.MockMessage.loadAttachment(messageId)
        // if (attachment instanceof MiniProgram) {
        //   return attachment.payload
        // }
        return {
            title: 'mock title for ' + messageId,
        };
    }
    async messageRawPayloadParser(payload) { return payload; }
    async messageRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageRawPayload(%s)', id);
        return this.mocker.messagePayload(id);
    }
    async messageSendText(conversationId, text) {
        return __classPrivateFieldGet(this, _PuppetMock_instances, "m", _PuppetMock_messageSend).call(this, conversationId, text);
    }
    async messageSendFile(conversationId, file) {
        return __classPrivateFieldGet(this, _PuppetMock_instances, "m", _PuppetMock_messageSend).call(this, conversationId, file);
    }
    async messageSendContact(conversationId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageSendUrl(%s, %s)', conversationId, contactId);
        // const contact = this.mocker.MockContact.load(contactId)
        // return this.messageSend(conversationId, contact)
    }
    async messageSendUrl(conversationId, urlLinkPayload) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageSendUrl(%s, %s)', conversationId, JSON.stringify(urlLinkPayload));
        // const url = new UrlLink(urlLinkPayload)
        // return this.messageSend(conversationId, url)
    }
    async messageSendLocation(conversationId, locationPayload) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageSendLocation(%s, %s)', conversationId, JSON.stringify(locationPayload));
        // const location = new Location(locationPayload)
        // return this.messageSend(conversationId, location)
    }
    async messageSendMiniProgram(conversationId, miniProgramPayload) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageSendMiniProgram(%s, %s)', conversationId, JSON.stringify(miniProgramPayload));
        // const miniProgram = new MiniProgram(miniProgramPayload)
        // return this.messageSend(conversationId, miniProgram)
    }
    async messageForward(conversationId, messageId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'messageForward(%s, %s)', conversationId, messageId);
    }
    /**
     *
     * Room
     *
     */
    async roomRawPayloadParser(payload) { return payload; }
    async roomRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomRawPayload(%s)', id);
        return this.mocker.roomPayload(id);
    }
    async roomList() {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomList()');
        return [...this.mocker.cacheRoomPayload.keys()];
    }
    async roomDel(roomId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomDel(%s, %s)', roomId, contactId);
    }
    async roomAvatar(roomId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomAvatar(%s)', roomId);
        const payload = await this.roomPayload(roomId);
        if (payload.avatar) {
            return wechaty_puppet_1.FileBox.fromUrl(payload.avatar);
        }
        wechaty_puppet_1.log.warn('PuppetMock', 'roomAvatar() avatar not found, use the chatie default.');
        return (0, config_js_1.qrCodeForChatie)();
    }
    async roomAdd(roomId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomAdd(%s, %s)', roomId, contactId);
    }
    async roomTopic(roomId, topic) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomTopic(%s, %s)', roomId, topic);
        if (typeof topic === 'undefined') {
            return 'mock room topic';
        }
        await this.dirtyPayload(wechaty_puppet_1.PayloadType.Room, roomId);
    }
    async roomCreate(contactIdList, topic) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomCreate(%s, %s)', contactIdList, topic);
        return 'mock_room_id';
    }
    async roomQuit(roomId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomQuit(%s)', roomId);
    }
    async roomQRCode(roomId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomQRCode(%s)', roomId);
        return roomId + ' mock qrcode';
    }
    async roomMemberList(roomId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomMemberList(%s)', roomId);
        return [];
    }
    async roomMemberRawPayload(roomId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomMemberRawPayload(%s, %s)', roomId, contactId);
        return {
            avatar: 'mock-avatar-data',
            id: 'xx',
            name: 'mock-name',
            roomAlias: 'yy',
        };
    }
    async roomMemberRawPayloadParser(rawPayload) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomMemberRawPayloadParser(%s)', rawPayload);
        return rawPayload;
    }
    async roomAnnounce(roomId, text) {
        if (text) {
            return;
        }
        return 'mock announcement for ' + roomId;
    }
    /**
     *
     * Room Invitation
     *
     */
    async roomInvitationAccept(roomInvitationId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomInvitationAccept(%s)', roomInvitationId);
    }
    async roomInvitationRawPayload(roomInvitationId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomInvitationRawPayload(%s)', roomInvitationId);
    }
    async roomInvitationRawPayloadParser(rawPayload) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'roomInvitationRawPayloadParser(%s)', JSON.stringify(rawPayload));
        return rawPayload;
    }
    /**
     *
     * Friendship
     *
     */
    async friendshipRawPayload(id) {
        return { id };
    }
    async friendshipRawPayloadParser(rawPayload) {
        return rawPayload;
    }
    async friendshipSearchPhone(phone) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'friendshipSearchPhone(%s)', phone);
        return null;
    }
    async friendshipSearchWeixin(weixin) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'friendshipSearchWeixin(%s)', weixin);
        return null;
    }
    async friendshipAdd(contactId, hello) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'friendshipAdd(%s, %s)', contactId, hello);
    }
    async friendshipAccept(friendshipId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'friendshipAccept(%s)', friendshipId);
    }
    /**
     *
     * Tag
     *
     */
    async tagContactAdd(tagId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'tagContactAdd(%s)', tagId, contactId);
    }
    async tagContactRemove(tagId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'tagContactRemove(%s)', tagId, contactId);
    }
    async tagContactDelete(tagId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'tagContactDelete(%s)', tagId);
    }
    async tagContactList(contactId) {
        wechaty_puppet_1.log.verbose('PuppetMock', 'tagContactList(%s)', contactId);
        return [];
    }
}
exports.PuppetMock = PuppetMock;
_PuppetMock_instances = new WeakSet(), _PuppetMock_messageSend = async function _PuppetMock_messageSend(conversationId, something) {
    wechaty_puppet_1.log.verbose('PuppetMock', 'messageSend(%s, %s)', conversationId, something);
    if (!this.id) {
        throw new Error('no this.id');
    }
    const user = this.mocker.ContactMock.load(this.id);
    let conversation;
    if (/@/.test(conversationId)) {
        // FIXME: extend a new puppet method messageRoomSendText, etc, for Room message?
        conversation = this.mocker.RoomMock.load(conversationId);
    }
    else {
        conversation = this.mocker.ContactMock.load(conversationId);
    }
    user.say(something).to(conversation);
};
PuppetMock.VERSION = config_js_1.VERSION;
exports.default = PuppetMock;
//# sourceMappingURL=puppet-mock.js.map