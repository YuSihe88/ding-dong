"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockerifyContactMock = exports.ContactMock = void 0;
// import { Attachment } from './types'
const cuid_1 = __importDefault(require("cuid"));
const path = __importStar(require("path"));
const wechaty_puppet_1 = require("wechaty-puppet");
const room_mock_js_1 = require("./room-mock.js");
// import { MiniProgram, UrlLink } from 'wechaty'
const generator_js_1 = require("../generator.js");
const contact_events_js_1 = require("../events/contact-events.js");
const POOL = Symbol('pool');
class ContactMock extends contact_events_js_1.ContactEventEmitter {
    constructor(payload) {
        super();
        this.payload = payload;
        wechaty_puppet_1.log.silly('MockContact', 'constructor(%s)', JSON.stringify(payload));
        this.mocker.contactPayload(payload.id, payload);
    }
    static get mocker() { throw new Error('This class can not be used directory. See: https://github.com/wechaty/wechaty/issues/2027'); }
    get mocker() { throw new Error('This class can not be used directory. See: https://github.com/wechaty/wechaty/issues/2027'); }
    static get pool() {
        if (!this[POOL]) {
            wechaty_puppet_1.log.verbose('MockContact', 'get pool() init pool');
            this[POOL] = new Map();
        }
        if (this === ContactMock) {
            throw new Error('The global MockContact class can not be used directly!'
                + 'See: https://github.com/wechaty/wechaty/issues/1217');
        }
        return this[POOL];
    }
    /**
     * @ignore
     * About the Generic: https://stackoverflow.com/q/43003970/1123955
     *
     * @static
     * @param {string} id
     * @returns {ContactMock}
     */
    static load(id) {
        const existingContact = this.pool.get(id);
        if (existingContact) {
            return existingContact;
        }
        throw new Error(`MockContact.load(): ${id} not exist.`);
    }
    static create(payload) {
        wechaty_puppet_1.log.verbose('MockContact', 'static create(%s)', JSON.stringify(payload));
        if (this.pool.get(payload.id)) {
            throw new Error('MockContact id ' + payload.id + ' has already created before. Use `load(' + payload.id + ')` to get it back.');
        }
        // when we call `load()`, `this` should already be extend-ed a child class.
        // so we force `this as any` at here to make the call.
        const newContact = new this(payload);
        this.pool.set(newContact.id, newContact);
        return newContact;
    }
    get id() { return this.payload.id; }
    toString() {
        return `MockContact(${this.payload.name}<${this.payload.id}>)`;
    }
    say(something, // | ContactMock, // | Attachment,
    mentions = []) {
        wechaty_puppet_1.log.verbose('MockContact', 'say(%s%s)', something || '', mentions.length > 0
            ? `,[${mentions.map(c => c.id).join(',')}]`
            : '');
        const that = this;
        return { to };
        function to(conversation) {
            wechaty_puppet_1.log.verbose('MockContact', 'say(%s).to(%s)', something || '', conversation?.id || '');
            if (!conversation) {
                conversation = that.mocker.randomConversation();
            }
            const basePayload = {
                id: (0, cuid_1.default)(),
                timestamp: Date.now(),
                type: wechaty_puppet_1.MessageType.Text,
            };
            let payload;
            if (something instanceof wechaty_puppet_1.FileBox) {
                //   basePayload.type = MessageType.Contact
                // } else if (something instanceof FileBox) {
                const type = (something.mimeType && something.mimeType !== 'application/octet-stream')
                    ? something.mimeType
                    : path.extname(something.name);
                switch (type) {
                    case 'image/jpeg':
                    case 'image/png':
                    case '.jpg':
                    case '.jpeg':
                    case '.png':
                        basePayload.type = wechaty_puppet_1.MessageType.Image;
                        break;
                    case 'video/mp4':
                    case '.mp4':
                        basePayload.type = wechaty_puppet_1.MessageType.Audio;
                        break;
                    default:
                        basePayload.type = wechaty_puppet_1.MessageType.Unknown;
                        break;
                }
                // } else if (something instanceof MiniProgram) {
                //   basePayload.type = MessageType.MiniProgram
                // } else if (something instanceof UrlLink) {
                //   basePayload.type = MessageType.Url
            }
            else {
                basePayload.text = something || (0, generator_js_1.generateSentence)();
            }
            if (conversation instanceof ContactMock) {
                payload = {
                    ...basePayload,
                    fromId: that.id,
                    toId: conversation.id,
                };
            }
            else if (conversation instanceof room_mock_js_1.RoomMock) {
                payload = {
                    ...basePayload,
                    fromId: that.id,
                    mentionIdList: mentions.map(c => c.id),
                    roomId: conversation.id,
                };
            }
            else {
                throw new Error('unknown conversation type: ' + typeof conversation);
            }
            // if (payload.type !== MessageType.Text && typeof something !== 'string' && something) {
            //   that.mocker.MockMessage.setAttachment(payload.id, something)
            // }
            const msg = that.mocker.MessageMock.create(payload);
            that.mocker.puppet.emit('message', { messageId: msg.id });
        }
    }
}
exports.ContactMock = ContactMock;
function mockerifyContactMock(mocker) {
    class MockerifiedContactMock extends ContactMock {
        static get mocker() { return mocker; }
        get mocker() { return mocker; }
    }
    return MockerifiedContactMock;
}
exports.mockerifyContactMock = mockerifyContactMock;
//# sourceMappingURL=contact-mock.js.map