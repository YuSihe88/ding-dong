import { ContactPayload, FileBox } from 'wechaty-puppet';
import type { Mocker } from '../mocker.js';
import { RoomMock } from './room-mock.js';
import { ContactEventEmitter } from '../events/contact-events.js';
declare const POOL: unique symbol;
interface To {
    to: (conversation?: ContactMock | RoomMock) => void;
}
declare class ContactMock extends ContactEventEmitter {
    payload: ContactPayload;
    static get mocker(): Mocker;
    get mocker(): Mocker;
    protected static [POOL]: Map<string, ContactMock>;
    protected static get pool(): Map<string, ContactMock>;
    /**
     * @ignore
     * About the Generic: https://stackoverflow.com/q/43003970/1123955
     *
     * @static
     * @param {string} id
     * @returns {ContactMock}
     */
    static load<T extends typeof ContactMock>(this: T, id: string): T['prototype'];
    static create<T extends typeof ContactMock>(payload: ContactPayload): T['prototype'];
    get id(): string;
    constructor(payload: ContactPayload);
    toString(): string;
    say(something?: string | FileBox, // | ContactMock, // | Attachment,
    mentions?: ContactMock[]): To;
}
declare function mockerifyContactMock(mocker: Mocker): typeof ContactMock;
export { ContactMock, mockerifyContactMock, };
//# sourceMappingURL=contact-mock.d.ts.map