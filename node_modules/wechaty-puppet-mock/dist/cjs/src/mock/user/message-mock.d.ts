import { MessageType, MessagePayload, FileBox } from 'wechaty-puppet';
import type { Mocker } from '../mocker.js';
import type { RoomMock } from './room-mock.js';
import type { ContactMock } from './contact-mock.js';
declare const POOL: unique symbol;
declare class MessageMock {
    payload: MessagePayload;
    static get mocker(): Mocker;
    get mocker(): Mocker;
    protected static [POOL]: Map<string, MessageMock>;
    protected static get pool(): Map<string, MessageMock>;
    /**
     * @ignore
     * About the Generic: https://stackoverflow.com/q/43003970/1123955
     *
     * @static
     * @param {string} id
     * @returns {MessageMock}
     */
    static load<T extends typeof MessageMock>(this: T, id: string): T['prototype'];
    static create<T extends typeof MessageMock>(payload: MessagePayload): T['prototype'];
    get id(): string;
    constructor(payload: MessagePayload);
    talker(): ContactMock;
    room(): undefined | RoomMock;
    listener(): undefined | ContactMock;
    text(): undefined | string;
    type(): MessageType;
    toContact(): Promise<ContactMock>;
    toFileBox(): Promise<FileBox>;
}
declare function mockerifyMessageMock(mocker: Mocker): typeof MessageMock;
export { MessageMock, mockerifyMessageMock, };
//# sourceMappingURL=message-mock.d.ts.map