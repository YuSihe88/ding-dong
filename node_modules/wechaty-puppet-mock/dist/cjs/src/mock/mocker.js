"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mocker = void 0;
const cuid_1 = __importDefault(require("cuid"));
const wechaty_puppet_1 = require("wechaty-puppet");
const mod_js_1 = require("./user/mod.js");
const generator_js_1 = require("./generator.js");
class Mocker {
    constructor() {
        wechaty_puppet_1.log.verbose('Mocker', 'constructor()');
        this.id = (0, cuid_1.default)();
        this.environmentList = [];
        this.environmentCleanupFnList = [];
        this.cacheContactPayload = new Map();
        this.cacheMessagePayload = new Map();
        this.cacheRoomPayload = new Map();
        this.mockerifiedContactMock = (0, mod_js_1.mockerifyContactMock)(this);
        this.mockerifiedMessageMock = (0, mod_js_1.mockerifyMessageMock)(this);
        this.mockerifiedRoomMock = (0, mod_js_1.mockerifyRoomMock)(this);
    }
    get ContactMock() { return this.mockerifiedContactMock; }
    get MessageMock() { return this.mockerifiedMessageMock; }
    get RoomMock() { return this.mockerifiedRoomMock; }
    set puppet(puppet) {
        if (this._puppet) {
            throw new Error('puppet has already been set before. can not be set twice.');
        }
        this._puppet = puppet;
    }
    get puppet() {
        if (!this._puppet) {
            throw new Error('puppet has not been set yet, cannot be used.');
        }
        return this._puppet;
    }
    toString() {
        return `Mocker<${this.id}>`;
    }
    use(...behaviorList) {
        wechaty_puppet_1.log.verbose('Mocker', 'use(%s)', behaviorList.length);
        this.environmentList.push(...behaviorList);
    }
    start() {
        wechaty_puppet_1.log.verbose('Mocker', 'start()');
        this.environmentList.forEach(behavior => {
            wechaty_puppet_1.log.verbose('Mocker', 'start() enabling behavior %s', behavior.name);
            const stop = behavior(this);
            this.environmentCleanupFnList.push(stop);
        });
    }
    stop() {
        wechaty_puppet_1.log.verbose('Mocker', 'stop()');
        let n = 0;
        this.environmentCleanupFnList.forEach(fn => {
            wechaty_puppet_1.log.verbose('Mocker', 'stop() cleaning behavior #%s', n++);
            fn();
        });
        this.environmentCleanupFnList.length = 0;
    }
    randomContact() {
        wechaty_puppet_1.log.verbose('Mocker', 'randomContact()');
        const contactIdList = [...this.cacheContactPayload.keys()];
        if (contactIdList.length <= 0) {
            return;
        }
        const index = Math.floor(contactIdList.length * Math.random());
        const id = contactIdList[index];
        const payload = this.cacheContactPayload.get(id);
        if (!payload) {
            throw new Error('no payload');
        }
        return this.ContactMock.load(id);
    }
    randomRoom() {
        wechaty_puppet_1.log.verbose('Mocker', 'randomRoom()');
        const roomIdList = [...this.cacheRoomPayload.keys()];
        if (roomIdList.length <= 0) {
            return;
        }
        const index = Math.floor(roomIdList.length * Math.random());
        const id = roomIdList[index];
        const payload = this.cacheRoomPayload.get(id);
        if (!payload) {
            throw new Error('no payload');
        }
        return this.RoomMock.load(id);
    }
    randomConversation() {
        wechaty_puppet_1.log.verbose('Mocker', 'randomConversation()');
        const contactIdList = [...this.cacheContactPayload.keys()];
        const roomIdList = [...this.cacheRoomPayload.keys()];
        const total = contactIdList.length + roomIdList.length;
        if (total <= 0) {
            throw new Error('no conversation found: 0 contact & 0 room!');
        }
        const pickContact = contactIdList.length / total;
        let conversation;
        if (Math.random() < pickContact) {
            conversation = this.randomContact();
        }
        else { // const pickRoom = roomIdList.length / total
            conversation = this.randomRoom();
        }
        if (!conversation) {
            throw new Error('no conversation');
        }
        return conversation;
    }
    /**
     *
     * Events
     *
     */
    scan(qrcode, status = wechaty_puppet_1.ScanStatus.Waiting) {
        wechaty_puppet_1.log.verbose('Mocker', 'scan(%s, %s)', qrcode, status);
        this.puppet.emit('scan', { qrcode, status });
    }
    login(user) {
        wechaty_puppet_1.log.verbose('Mocker', 'login(%s)', user);
        this.puppet.login(user.id)
            .catch(e => wechaty_puppet_1.log.error('Mocker', 'login(%s) rejection: %s', user.id, e));
    }
    /**
     *
     * Creators for MockContacts / MockRooms
     *
     */
    createContact(payload) {
        wechaty_puppet_1.log.verbose('Mocker', 'createContact(%s)', payload ? JSON.stringify(payload) : '');
        const defaultPayload = (0, generator_js_1.generateContactPayload)();
        const normalizedPayload = {
            ...defaultPayload,
            ...payload,
        };
        return this.ContactMock.create(normalizedPayload);
    }
    createContacts(num) {
        wechaty_puppet_1.log.verbose('Mocker', 'createContacts(%s)', num);
        const contactList = [];
        while (num--) {
            const contact = this.createContact();
            contactList.push(contact);
        }
        return contactList;
    }
    createRoom(payload) {
        wechaty_puppet_1.log.verbose('Mocker', 'createRoom(%s)', payload ? JSON.stringify(payload) : '');
        const defaultPayload = (0, generator_js_1.generateRoomPayload)(...this.cacheContactPayload.keys());
        const normalizedPayload = {
            ...defaultPayload,
            ...payload,
        };
        return this.RoomMock.create(normalizedPayload);
    }
    createRooms(num) {
        wechaty_puppet_1.log.verbose('Mocker', 'createRooms(%s)', num);
        const roomList = [];
        while (num--) {
            const room = this.createRoom();
            roomList.push(room);
        }
        return roomList;
    }
    contactPayload(id, payload) {
        wechaty_puppet_1.log.silly('Mocker', 'contactPayload(%s%s)', id, payload ? ',' + JSON.stringify(payload) : '');
        if (payload) {
            this.cacheContactPayload.set(id, payload);
            return;
        }
        payload = this.cacheContactPayload.get(id);
        if (!payload) {
            throw new Error('no payload found for id ' + id);
        }
        return payload;
    }
    roomPayload(id, payload) {
        wechaty_puppet_1.log.silly('Mocker', 'roomPayload(%s%s)', id, payload ? ',' + JSON.stringify(payload) : '');
        if (payload) {
            this.cacheRoomPayload.set(id, payload);
            return;
        }
        payload = this.cacheRoomPayload.get(id);
        if (!payload) {
            throw new Error('no payload found for id ' + id);
        }
        return payload;
    }
    messagePayload(id, payload) {
        wechaty_puppet_1.log.silly('Mocker', 'messagePayload(%s%s)', id, payload ? ',' + JSON.stringify(payload) : '');
        if (payload) {
            this.cacheMessagePayload.set(id, payload);
            const msg = this.MessageMock.load(payload.id);
            msg.room()?.emit('message', msg);
            msg.talker().emit('message', msg);
            msg.listener()?.emit('message', msg);
            return;
        }
        payload = this.cacheMessagePayload.get(id);
        if (!payload) {
            throw new Error('no payload found for id ' + id);
        }
        return payload;
    }
}
exports.Mocker = Mocker;
//# sourceMappingURL=mocker.js.map