import { ContactPayload, RoomPayload, MessagePayload, ScanStatus } from 'wechaty-puppet';
import type { PuppetMock } from '../puppet-mock.js';
import { ContactMock, RoomMock, MessageMock } from './user/mod.js';
import type { EnvironmentMock } from './environment.js';
declare class Mocker {
    id: string;
    cacheContactPayload: Map<string, ContactPayload>;
    cacheRoomPayload: Map<string, RoomPayload>;
    cacheMessagePayload: Map<string, MessagePayload>;
    protected mockerifiedContactMock?: typeof ContactMock;
    protected mockerifiedMessageMock?: typeof MessageMock;
    protected mockerifiedRoomMock?: typeof RoomMock;
    get ContactMock(): typeof ContactMock;
    get MessageMock(): typeof MessageMock;
    get RoomMock(): typeof RoomMock;
    protected environmentList: EnvironmentMock[];
    protected environmentCleanupFnList: (() => void)[];
    protected _puppet?: PuppetMock;
    set puppet(puppet: PuppetMock);
    get puppet(): PuppetMock;
    constructor();
    toString(): string;
    use(...behaviorList: EnvironmentMock[]): void;
    start(): void;
    stop(): void;
    randomContact(): undefined | ContactMock;
    randomRoom(): undefined | RoomMock;
    randomConversation(): ContactMock | RoomMock;
    /**
     *
     * Events
     *
     */
    scan(qrcode: string, status?: ScanStatus): void;
    login(user: ContactMock): void;
    /**
     *
     * Creators for MockContacts / MockRooms
     *
     */
    createContact(payload?: Partial<ContactPayload>): ContactMock;
    createContacts(num: number): ContactMock[];
    createRoom(payload?: Partial<RoomPayload>): RoomMock;
    createRooms(num: number): RoomMock[];
    /**
     *
     * Setters & Getters for Payloads
     *
     */
    contactPayload(id: string, payload: ContactPayload): void;
    contactPayload(id: string): ContactPayload;
    roomPayload(id: string, payload: RoomPayload): void;
    roomPayload(id: string): RoomPayload;
    messagePayload(id: string, payload: MessagePayload): void;
    messagePayload(id: string): MessagePayload;
}
export { Mocker };
//# sourceMappingURL=mocker.d.ts.map