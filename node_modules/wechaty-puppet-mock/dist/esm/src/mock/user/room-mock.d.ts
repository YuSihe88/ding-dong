import { RoomPayload } from 'wechaty-puppet';
import type { Mocker } from '../mocker.js';
import type { ContactMock } from './contact-mock.js';
import { RoomEventEmitter } from '../events/room-events.js';
interface By {
    by: (contact?: ContactMock) => void;
}
declare const POOL: unique symbol;
declare class RoomMock extends RoomEventEmitter {
    payload: RoomPayload;
    static get mocker(): Mocker;
    get mocker(): Mocker;
    protected static [POOL]: Map<string, RoomMock>;
    protected static get pool(): Map<string, RoomMock>;
    /**
     * @ignore
     * About the Generic: https://stackoverflow.com/q/43003970/1123955
     * @static
     * @param {string} id
     * @returns {Room}
     */
    static load<T extends typeof RoomMock>(this: T, id: string): T['prototype'];
    static create<T extends typeof RoomMock>(payload: RoomPayload): T['prototype'];
    get id(): string;
    constructor(payload: RoomPayload);
    topic(text: string): By;
    add(...inviteeList: ContactMock[]): By;
    remove(...removeeList: ContactMock[]): By;
}
declare function mockerifyRoomMock(mocker: Mocker): typeof RoomMock;
export { RoomMock, mockerifyRoomMock, };
//# sourceMappingURL=room-mock.d.ts.map