/**
 * Huan(202110): Assignment and Resolution of Uniform Resource Names
 *  https://datatracker.ietf.org/wg/urn/about/
 */
/// <reference types="node" />
import type { Readable } from 'stream';
interface UniformResourceNameRegistryOptions {
    expireMilliseconds?: number;
    storeDir?: string;
}
declare class UniformResourceNameRegistry {
    protected static removeProcessExitListenerMap: WeakMap<UniformResourceNameRegistry, Function>;
    /**
     * The directory that store all UUID files
     */
    protected storeDir: string;
    /**
     * The timer of delete expired UUID files:
     *  - key: the instance of the UniformResourceNameRegistry
     *    (there might be multiple instances for different storeDir / namespaces)
     *  - value: the timer (return by setTimeout)
     */
    protected uuidTimerMap: Map<string, ReturnType<typeof setTimeout>>;
    protected expireMilliseconds: number;
    constructor(options?: UniformResourceNameRegistryOptions);
    init(): Promise<void>;
    /**
     * Clean up by calling this.destroy() before process exit
     */
    protected addProcessExitListener(): Promise<void>;
    protected uuidFile(uuid: string): string;
    /**
     * `resolve()` can only be used once.
     *  after resolve(), the UUID will be not exist any more
     */
    resolve(uuid: string): Promise<Readable>;
    /**
     * Save the `Readable` stream and return a random UUID
     *  The UUID will be expired after MAX_KEEP_MINUTES
     */
    register(stream: Readable): Promise<string>;
    /**
     * Set a timer to execute delete callback after `expireMilliseconds`
     */
    protected addTimer(uuid: string): void;
    protected delete(uuid: string): Promise<void>;
    protected unlinkFactory(uuid: string): () => Promise<void>;
    destroy(): void;
}
export { UniformResourceNameRegistry };
//# sourceMappingURL=uniform-resource-name-registry.d.ts.map