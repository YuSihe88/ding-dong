/**
 *   Wechaty - https://github.com/chatie/wechaty
 *
 *   @copyright 2016-2018 Huan LI <zixia@zixia.net>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
import { ContactPayload, FriendshipPayload, MessagePayload, Puppet, PuppetOptions, FileBox, RoomInvitationPayload, RoomMemberPayload, RoomPayload, UrlLinkPayload, MiniProgramPayload, ImageType } from 'wechaty-puppet';
import { WebContactRawPayload, WebMessageRawPayload, WebRoomRawMember, WebRoomRawPayload } from './web-schemas.js';
export declare class PuppetWechat4u extends Puppet {
    options: PuppetOptions;
    static readonly VERSION: string;
    /**
     * Wecaht4u
     *
     * Code from:
     * https://github.com/nodeWechat/wechat4u/blob/46931e78bcb56899b8d2a42a37b919e7feaebbef/run-core.js
     *
     */
    private wechat4u?;
    private scanQrCode?;
    private readonly cacheMessageRawPayload;
    constructor(options?: PuppetOptions);
    start(): Promise<void>;
    private monkeyPatch;
    /**
     * Monkey Patch for Wechat4u
     *  - https://www.audero.it/blog/2016/12/05/monkey-patching-javascript/#what-is-monkey-patching
     *
     * What is Monkey patching?
     *  Monkey patching is a technique to add, modify, or suppress
     *  the default behavior of a piece of code at runtime
     *  without changing its original source code.
     */
    private monkeyPatchOffState;
    private monkeyPatchHook;
    private initHookEvents;
    stop(): Promise<void>;
    logout(): Promise<void>;
    ding(data: string): Promise<void>;
    private isFriendConfirm;
    unref(): void;
    /**
     *
     * ContactSelf
     *
     *
     */
    contactSelfQRCode(): Promise<string>;
    contactSelfName(name: string): Promise<void>;
    contactSelfSignature(signature: string): Promise<void>;
    /**
     *
     * Contact
     *
     */
    contactAlias(contactId: string): Promise<string>;
    contactAlias(contactId: string, alias: null | string): Promise<void>;
    contactList(): Promise<string[]>;
    contactQrcode(contactId: string): Promise<string>;
    contactAvatar(contactId: string): Promise<FileBox>;
    contactAvatar(contactId: string, file: FileBox): Promise<void>;
    contactRawPayload(contactId: string): Promise<WebContactRawPayload>;
    contactRawPayloadParser(rawPayload: WebContactRawPayload): Promise<ContactPayload>;
    /**
     *
     * Message
     *
     */
    messageContact(messageId: string): Promise<string>;
    messageRecall(messageId: string): Promise<boolean>;
    messageImage(messageId: string, imageType: ImageType): Promise<FileBox>;
    messageFile(id: string): Promise<FileBox>;
    messageUrl(messageId: string): Promise<UrlLinkPayload>;
    messageMiniProgram(messageId: string): Promise<MiniProgramPayload>;
    messageRawPayload(id: string): Promise<WebMessageRawPayload>;
    messageRawPayloadParser(rawPayload: WebMessageRawPayload): Promise<MessagePayload>;
    messageSendText(conversationId: string, text: string): Promise<void>;
    messageSendFile(conversationId: string, file: FileBox): Promise<void>;
    messageSendContact(conversationId: string, contactId: string): Promise<void>;
    messageSendUrl(conversationId: string, urlLinkPayload: UrlLinkPayload): Promise<void>;
    messageSendMiniProgram(conversationId: string, miniProgramPayload: MiniProgramPayload): Promise<void>;
    messageForward(conversationid: string, messageId: string): Promise<void>;
    conversationReadMark(conversationId: string, hasRead?: boolean): Promise<void | boolean>;
    /**
     *
     * Room Invitation
     *
     */
    roomInvitationAccept(roomInvitationId: string): Promise<void>;
    roomInvitationRawPayload(roomInvitationId: string): Promise<any>;
    roomInvitationRawPayloadParser(rawPayload: any): Promise<RoomInvitationPayload>;
    /**
     *
     * Room
     *
     */
    roomRawPayload(id: string): Promise<WebRoomRawPayload>;
    roomRawPayloadParser(rawPayload: WebRoomRawPayload): Promise<RoomPayload>;
    roomList(): Promise<string[]>;
    roomDel(roomId: string, contactId: string): Promise<void>;
    roomAvatar(roomId: string): Promise<FileBox>;
    roomAdd(roomId: string, contactId: string): Promise<void>;
    roomTopic(roomId: string): Promise<string>;
    roomTopic(roomId: string, topic: string): Promise<void>;
    roomCreate(contactIdList: string[], topic: string): Promise<string>;
    roomAnnounce(roomId: string): Promise<string>;
    roomAnnounce(roomId: string, text: string): Promise<void>;
    roomQuit(roomId: string): Promise<void>;
    roomQRCode(roomId: string): Promise<string>;
    roomMemberList(roomId: string): Promise<string[]>;
    roomMemberRawPayload(roomId: string, contactId: string): Promise<WebRoomRawMember>;
    roomMemberRawPayloadParser(rawPayload: WebRoomRawMember): Promise<RoomMemberPayload>;
    /**
     *
     * Friendship
     *
     */
    friendshipSearchPhone(phone: string): Promise<null | string>;
    friendshipSearchWeixin(weixin: string): Promise<null | string>;
    friendshipAdd(contactId: string, hello: string): Promise<void>;
    friendshipAccept(friendshipId: string): Promise<void>;
    friendshipRawPayload(id: string): Promise<any>;
    friendshipRawPayloadParser(rawPayload: any): Promise<FriendshipPayload>;
    /**
     *
     * Tag
     *
     */
    tagContactAdd(tagId: string, contactId: string): Promise<void>;
    tagContactRemove(tagId: string, contactId: string): Promise<void>;
    tagContactDelete(tagId: string): Promise<void>;
    tagContactList(contactId?: string): Promise<string[]>;
    contactCorporationRemark(..._: any[]): never;
    contactDescription(..._: any[]): never;
    contactPhone(..._: any[]): never;
}
export default PuppetWechat4u;
//# sourceMappingURL=puppet-wechat4u.d.ts.map