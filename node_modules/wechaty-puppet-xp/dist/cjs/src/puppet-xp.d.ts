import { ContactPayload, FileBox, FriendshipPayload, ImageType, MessagePayload, Puppet, PuppetOptions, RoomInvitationPayload, RoomMemberPayload, RoomPayload, UrlLinkPayload, MiniProgramPayload, LocationPayload } from 'wechaty-puppet';
import { WeChatSidecar } from './wechat-sidecar.js';
export declare type PuppetXpOptions = PuppetOptions;
declare class PuppetXp extends Puppet {
    #private;
    options: PuppetXpOptions;
    static readonly VERSION: string;
    private messageStore;
    private roomStore;
    private contactStore;
    private selfInfo;
    protected get sidecar(): WeChatSidecar;
    constructor(options?: PuppetXpOptions);
    version(): string;
    start(): Promise<void>;
    stop(): Promise<void>;
    login(contactId: string): Promise<void>;
    logout(): Promise<void>;
    ding(data?: string): void;
    unref(): void;
    /**
    *
    * ContactSelf
    *
    *
    */
    contactSelfQRCode(): Promise<string>;
    contactSelfName(name: string): Promise<void>;
    contactSelfSignature(signature: string): Promise<void>;
    /**
    *
    * Contact
    *
    */
    contactAlias(contactId: string): Promise<string>;
    contactAlias(contactId: string, alias: string | null): Promise<void>;
    contactPhone(contactId: string): Promise<string[]>;
    contactPhone(contactId: string, phoneList: string[]): Promise<void>;
    contactCorporationRemark(contactId: string, corporationRemark: string): Promise<void>;
    contactDescription(contactId: string, description: string): Promise<void>;
    contactList(): Promise<string[]>;
    contactAvatar(contactId: string): Promise<FileBox>;
    contactAvatar(contactId: string, file: FileBox): Promise<void>;
    contactRawPayloadParser(payload: ContactPayload): Promise<ContactPayload>;
    contactRawPayload(id: string): Promise<ContactPayload>;
    /**
    *
    * Conversation
    *
    */
    conversationReadMark(conversationId: string, hasRead?: boolean): Promise<void>;
    /**
    *
    * Message
    *
    */
    messageContact(messageId: string): Promise<string>;
    messageImage(messageId: string, imageType: ImageType): Promise<FileBox>;
    messageRecall(messageId: string): Promise<boolean>;
    messageFile(id: string): Promise<FileBox>;
    messageUrl(messageId: string): Promise<UrlLinkPayload>;
    messageMiniProgram(messageId: string): Promise<MiniProgramPayload>;
    messageLocation(messageId: string): Promise<LocationPayload>;
    messageRawPayloadParser(payload: MessagePayload): Promise<MessagePayload>;
    messageRawPayload(id: string): Promise<MessagePayload>;
    messageSendText(conversationId: string, text: string, mentionIdList?: string[]): Promise<void>;
    messageSendFile(conversationId: string, file: FileBox): Promise<void>;
    messageSendContact(conversationId: string, contactId: string): Promise<void>;
    messageSendUrl(conversationId: string, urlLinkPayload: UrlLinkPayload): Promise<void>;
    messageSendMiniProgram(conversationId: string, miniProgramPayload: MiniProgramPayload): Promise<void>;
    messageSendLocation(conversationId: string, locationPayload: LocationPayload): Promise<void | string>;
    messageForward(conversationId: string, messageId: string): Promise<void>;
    /**
    *
    * Room
    *
    */
    roomRawPayloadParser(payload: RoomPayload): Promise<RoomPayload>;
    roomRawPayload(id: string): Promise<RoomPayload>;
    roomList(): Promise<string[]>;
    roomDel(roomId: string, contactId: string): Promise<void>;
    roomAvatar(roomId: string): Promise<FileBox>;
    roomAdd(roomId: string, contactId: string): Promise<void>;
    roomTopic(roomId: string): Promise<string>;
    roomTopic(roomId: string, topic: string): Promise<void>;
    roomCreate(contactIdList: string[], topic: string): Promise<string>;
    roomQuit(roomId: string): Promise<void>;
    roomQRCode(roomId: string): Promise<string>;
    roomMemberList(roomId: string): Promise<string[]>;
    roomMemberRawPayload(roomId: string, contactId: string): Promise<RoomMemberPayload>;
    roomMemberRawPayloadParser(rawPayload: RoomMemberPayload): Promise<RoomMemberPayload>;
    roomAnnounce(roomId: string): Promise<string>;
    roomAnnounce(roomId: string, text: string): Promise<void>;
    /**
    *
    * Room Invitation
    *
    */
    roomInvitationAccept(roomInvitationId: string): Promise<void>;
    roomInvitationRawPayload(roomInvitationId: string): Promise<any>;
    roomInvitationRawPayloadParser(rawPayload: any): Promise<RoomInvitationPayload>;
    /**
    *
    * Friendship
    *
    */
    friendshipRawPayload(id: string): Promise<any>;
    friendshipRawPayloadParser(rawPayload: any): Promise<FriendshipPayload>;
    friendshipSearchPhone(phone: string): Promise<null | string>;
    friendshipSearchWeixin(weixin: string): Promise<null | string>;
    friendshipAdd(contactId: string, hello: string): Promise<void>;
    friendshipAccept(friendshipId: string): Promise<void>;
    /**
    *
    * Tag
    *
    */
    tagContactAdd(tagId: string, contactId: string): Promise<void>;
    tagContactRemove(tagId: string, contactId: string): Promise<void>;
    tagContactDelete(tagId: string): Promise<void>;
    tagContactList(contactId?: string): Promise<string[]>;
}
export { PuppetXp };
export default PuppetXp;
//# sourceMappingURL=puppet-xp.d.ts.map