"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchSuccess = exports.recover$ = void 0;
const wechaty_puppet_1 = require("wechaty-puppet");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * Filters
 */
const switchSuccess = (status) => status === true;
exports.switchSuccess = switchSuccess;
/**
 * Actions
 */
const resetPuppet = (puppet) => (n) => puppet.emit('reset', { data: `recover$() AED #${n}` });
const dingHeartbeat = (puppet) => (n) => puppet.ding(`recover$() CPR #${n}`);
/**
 * Observables
 */
const switchOn$ = (puppet) => (0, rxjs_1.fromEvent)(puppet.state, 'on');
const switchOff$ = (puppet) => (0, rxjs_1.fromEvent)(puppet.state, 'off');
void switchOff$;
const heartbeat$ = (puppet) => (0, rxjs_1.fromEvent)(puppet, 'heartbeat');
/**
 * Streams
 */
// Heartbeat stream is like ECG (ElectroCardioGraphy)
const switchOnHeartbeat$ = (puppet) => switchOn$(puppet).pipe((0, operators_1.filter)(switchSuccess), (0, operators_1.tap)(_ => wechaty_puppet_1.log.verbose('PuppetService', 'recover$() switchOn$ fired')), (0, operators_1.switchMap)(_ => heartbeat$(puppet).pipe((0, operators_1.startWith)(undefined), // initial beat
(0, operators_1.tap)(payload => wechaty_puppet_1.log.verbose('PuppetService', 'recover$() heartbeat: %s', JSON.stringify(payload))))));
/**
 * The GRPC keepalive timeout is 20 seconds
 * So we use 15 seconds to save the GRPC keepalive cost
 *
 *  https://github.com/grpc/grpc/blob/master/doc/keepalive.md
 *    GRPC_ARG_KEEPALIVE_TIMEOUT_MS 20000 (20 seconds)  20000 (20 seconds)
 */
const PUPPET_SERVICE_KEEPALIVE_TIMEOUT = 15 * 1000;
let HEARTBEAT_COUNTER = 0;
// Ding is like CPR (Cardio Pulmonary Resuscitation)
const heartbeatDing$ = (puppet) => switchOnHeartbeat$(puppet).pipe((0, operators_1.debounce)(() => (0, rxjs_1.interval)(PUPPET_SERVICE_KEEPALIVE_TIMEOUT)), (0, operators_1.tap)(_ => wechaty_puppet_1.log.verbose('PuppetService', 'recover$() heartbeatDing()')), (0, operators_1.mapTo)(HEARTBEAT_COUNTER++), (0, operators_1.tap)(dingHeartbeat(puppet)));
const PUPPET_SERVICE_RESET_TIMEOUT = 60 * 1000;
// Reset is like AED (Automated External Defibrillator)
const heartbeatReset$ = (puppet) => switchOnHeartbeat$(puppet).pipe((0, operators_1.debounce)(_ => (0, rxjs_1.interval)(PUPPET_SERVICE_RESET_TIMEOUT)), (0, operators_1.tap)(_ => wechaty_puppet_1.log.verbose('PuppetService', 'recover$() heartbeatReset()')), (0, operators_1.switchMap)(_ => (0, rxjs_1.interval)(PUPPET_SERVICE_RESET_TIMEOUT).pipe(
// map(n => `AED#${n}`),
(0, operators_1.tap)(resetPuppet(puppet)), (0, operators_1.takeUntil)(heartbeat$(puppet)))));
/**
 * Main stream
 */
const recover$ = (puppet) => (0, rxjs_1.merge)(heartbeatDing$(puppet), heartbeatReset$(puppet));
exports.recover$ = recover$;
//# sourceMappingURL=recover$.js.map