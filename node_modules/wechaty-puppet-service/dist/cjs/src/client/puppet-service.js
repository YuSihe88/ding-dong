"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PuppetService = void 0;
const util_1 = __importDefault(require("util"));
const file_box_1 = require("file-box");
const wechaty_puppet_1 = require("wechaty-puppet");
const wechaty_grpc_1 = require("wechaty-grpc");
const config_js_1 = require("../config.js");
const event_type_rev_js_1 = require("../event-type-rev.js");
const mod_js_1 = require("../file-box-stream/mod.js");
const serialize_file_box_js_1 = require("../server/serialize-file-box.js");
const recover__js_1 = require("./recover$.js");
const grpc_client_js_1 = require("./grpc-client.js");
const payload_store_js_1 = require("./payload-store.js");
const package_json_js_1 = require("../package-json.js");
class PuppetService extends wechaty_puppet_1.Puppet {
    constructor(options = {}) {
        super(options);
        this.options = options;
        this.payloadStore = new payload_store_js_1.PayloadStore({
            token: config_js_1.envVars.WECHATY_PUPPET_SERVICE_TOKEN(this.options.token),
        });
        this.hookPayloadStore();
    }
    name() {
        return package_json_js_1.packageJson.name || 'wechaty-puppet-service';
    }
    version() {
        return package_json_js_1.packageJson.version || '0.0.0';
    }
    async start() {
        await super.start();
        wechaty_puppet_1.log.verbose('PuppetService', 'start()');
        if (this.state.on()) {
            wechaty_puppet_1.log.warn('PuppetService', 'start() is called on a ON puppet. await ready(on) and return.');
            await this.state.ready('on');
            return;
        }
        this.state.on('pending');
        if (this.grpc) {
            wechaty_puppet_1.log.warn('PuppetService', 'start() found this.grpc is already existed. dropped.');
            this.grpc = undefined;
        }
        try {
            const grpc = new grpc_client_js_1.GrpcClient(this.options);
            /**
             * Huan(202108): when we startedv the event stream,
             *  the `this.grpc` need to be available for all listeners.
             */
            this.grpc = grpc;
            this.bridgeGrpcEventStream(grpc);
            await grpc.start();
            this.recoverSubscription = (0, recover__js_1.recover$)(this).subscribe({
                complete: () => wechaty_puppet_1.log.verbose('PuppetService', 'constructor() recover$().subscribe() complete()'),
                error: e => wechaty_puppet_1.log.error('PuppetService', 'constructor() recover$().subscribe() error(%s)', e),
                next: x => wechaty_puppet_1.log.verbose('PuppetService', 'constructor() recover$().subscribe() next(%s)', JSON.stringify(x)),
            });
            this.state.on(true);
        }
        catch (e) {
            wechaty_puppet_1.log.error('PuppetService', 'start() rejection: %s\n%s', e.message, e.stack);
            try {
                await this.grpc?.stop();
            }
            catch (e) {
                wechaty_puppet_1.log.error('PuppetService', 'start() this.grpc.stop() rejection: %s\n%s', e.message, e.stack);
            }
            finally {
                this.state.off(true);
            }
            throw e;
        }
    }
    async stop() {
        await super.stop();
        wechaty_puppet_1.log.verbose('PuppetService', 'stop()');
        if (this.state.off()) {
            wechaty_puppet_1.log.warn('PuppetService', 'stop() is called on a OFF puppet. await ready(off) and return.');
            await this.state.ready('off');
            return;
        }
        this.state.off('pending');
        if (this.recoverSubscription) {
            this.recoverSubscription.unsubscribe();
            this.recoverSubscription = undefined;
        }
        if (this.logonoff()) {
            this.emit('logout', {
                contactId: this.selfId(),
                data: 'PuppetService stop()',
            });
            this.id = undefined;
        }
        try {
            await this.grpc?.stop();
            this.grpc = undefined;
        }
        catch (e) {
            wechaty_puppet_1.log.error('PuppetService', 'stop() client.stop() rejection: %s', e.message);
        }
        finally {
            this.state.off(true);
        }
    }
    hookPayloadStore() {
        wechaty_puppet_1.log.verbose('PuppetService', 'hookPayloadStore()');
        this.on('login', async ({ contactId }) => {
            try {
                wechaty_puppet_1.log.verbose('PuppetService', 'hookPayloadStore() this.on(login) contactId: "%s"', contactId);
                await this.payloadStore.start(contactId);
            }
            catch (e) {
                wechaty_puppet_1.log.verbose('PuppetService', 'hookPayloadStore() this.on(login) rejection "%s"', e.message);
            }
        });
        this.on('logout', async ({ contactId }) => {
            wechaty_puppet_1.log.verbose('PuppetService', 'hookPayloadStore() this.on(logout) contactId: "%s"', contactId);
            try {
                await this.payloadStore.stop();
            }
            catch (e) {
                wechaty_puppet_1.log.verbose('PuppetService', 'hookPayloadStore() this.on(logout) rejection "%s"', e.message);
            }
        });
    }
    bridgeGrpcEventStream(client) {
        wechaty_puppet_1.log.verbose('PuppetService', 'bridgeGrpcEventStream(client)');
        client
            .on('data', this.onGrpcStreamEvent.bind(this))
            .on('end', () => {
            wechaty_puppet_1.log.verbose('PuppetService', 'bridgeGrpcEventStream() eventStream.on(end)');
        })
            .on('error', (e) => {
            // https://github.com/wechaty/wechaty-puppet-service/issues/16
            wechaty_puppet_1.log.verbose('PuppetService', 'bridgeGrpcEventStream() eventStream.on(error) %s', e);
            const reason = 'bridgeGrpcEventStream() eventStream.on(error) ' + e;
            /**
             * The `Puppet` class have a throttleQueue for receiving the `reset` events
             *  and it's the `Puppet` class's duty for call the `puppet.reset()` to reset the puppet.
             */
            if (this.state.on()) {
                this.emit('reset', { data: reason });
            }
        })
            .on('cancel', (...args) => {
            wechaty_puppet_1.log.verbose('PuppetService', 'bridgeGrpcEventStream() eventStream.on(cancel), %s', JSON.stringify(args));
        });
    }
    onGrpcStreamEvent(event) {
        const type = event.getType();
        const payload = event.getPayload();
        wechaty_puppet_1.log.verbose('PuppetService', 'onGrpcStreamEvent({type:%s(%s), payload(len:%s)})', event_type_rev_js_1.EventTypeRev[type], type, payload.length);
        wechaty_puppet_1.log.silly('PuppetService', 'onGrpcStreamEvent({type:%s(%s), payload:"%s"})', event_type_rev_js_1.EventTypeRev[type], type, payload);
        if (type !== wechaty_grpc_1.puppet.EventType.EVENT_TYPE_HEARTBEAT) {
            this.emit('heartbeat', {
                data: `onGrpcStreamEvent(${event_type_rev_js_1.EventTypeRev[type]})`,
            });
        }
        switch (type) {
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_DONG:
                this.emit('dong', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_ERROR:
                this.emit('error', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_HEARTBEAT:
                this.emit('heartbeat', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_FRIENDSHIP:
                this.emit('friendship', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_LOGIN:
                {
                    const loginPayload = JSON.parse(payload);
                    this.id = loginPayload.contactId;
                    this.emit('login', loginPayload);
                }
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_LOGOUT:
                this.id = undefined;
                this.emit('logout', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_DIRTY:
                this.emit('dirty', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_MESSAGE:
                this.emit('message', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_READY:
                this.emit('ready', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_ROOM_INVITE:
                this.emit('room-invite', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_ROOM_JOIN:
                this.emit('room-join', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_ROOM_LEAVE:
                this.emit('room-leave', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_ROOM_TOPIC:
                this.emit('room-topic', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_SCAN:
                this.emit('scan', JSON.parse(payload));
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_RESET:
                wechaty_puppet_1.log.warn('PuppetService', 'onGrpcStreamEvent() got an EventType.EVENT_TYPE_RESET ?');
                // the `reset` event should be dealed not send out
                break;
            case wechaty_grpc_1.puppet.EventType.EVENT_TYPE_UNSPECIFIED:
                wechaty_puppet_1.log.error('PuppetService', 'onGrpcStreamEvent() got an EventType.EVENT_TYPE_UNSPECIFIED ?');
                break;
            default:
                // Huan(202003): in default, the `type` type should be `never`, please check.
                throw new Error('eventType ' + type + ' unsupported! (code should not reach here)');
        }
    }
    async logout() {
        wechaty_puppet_1.log.verbose('PuppetService', 'logout()');
        if (!this.id) {
            throw new Error('logout before login?');
        }
        try {
            await util_1.default.promisify(this.grpc.client.logout.bind(this.grpc.client))(new wechaty_grpc_1.puppet.LogoutRequest());
        }
        catch (e) {
            wechaty_puppet_1.log.error('PuppetService', 'logout() rejection: %s', e && e.message);
            throw e;
        }
    }
    ding(data) {
        wechaty_puppet_1.log.silly('PuppetService', 'ding(%s)', data);
        const request = new wechaty_grpc_1.puppet.DingRequest();
        request.setData(data || '');
        if (!this.grpc?.client) {
            wechaty_puppet_1.log.info('PuppetService', 'ding() Skip ding since client is not connected.');
            return;
        }
        this.grpc.client.ding(request, (error, _response) => {
            if (error) {
                wechaty_puppet_1.log.error('PuppetService', 'ding() rejection: %s', error);
            }
        });
    }
    /**
     * Huan(202108): consider to use `messagePayloadDirty`, `roomPayloadDirty`
     *  to replace this `dirtyPayload` method for a clearer design and easy to maintain.
     */
    async dirtyPayload(type, id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'dirtyPayload(%s, %s)', type, id);
        await super.dirtyPayload(type, id);
        switch (type) {
            case wechaty_puppet_1.PayloadType.Contact:
                await this.payloadStore.contact?.delete(id);
                break;
            case wechaty_puppet_1.PayloadType.Friendship:
                // TODO
                break;
            case wechaty_puppet_1.PayloadType.Message:
                // await this.payloadStore.message?.del(id)
                // TODO
                break;
            case wechaty_puppet_1.PayloadType.Room:
                await this.payloadStore.room?.delete(id);
                break;
            case wechaty_puppet_1.PayloadType.RoomMember:
                await this.payloadStore.roomMember?.delete(id);
                break;
            default:
                wechaty_puppet_1.log.error('PuppetService', 'dirtyPayload(%s) unknown type', type);
                break;
        }
        if (!this.grpc?.client) {
            throw new Error('PuppetService dirtyPayload() can not execute due to no grpcClient.');
        }
        const request = new wechaty_grpc_1.puppet.DirtyPayloadRequest();
        request.setId(id);
        request.setType(type);
        try {
            await util_1.default.promisify(this.grpc.client.dirtyPayload.bind(this.grpc.client))(request);
        }
        catch (e) {
            wechaty_puppet_1.log.error('PuppetService', 'dirtyPayload() rejection: %s', e && e.message);
            throw e;
        }
    }
    unref() {
        wechaty_puppet_1.log.verbose('PuppetService', 'unref()');
        super.unref();
    }
    async contactAlias(contactId, alias) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactAlias(%s, %s)', contactId, alias);
        /**
         * Get alias
         */
        if (typeof alias === 'undefined') {
            const request = new wechaty_grpc_1.puppet.ContactAliasRequest();
            request.setId(contactId);
            const response = await util_1.default.promisify(this.grpc.client.contactAlias.bind(this.grpc.client))(request);
            const aliasWrapper = response.getAlias();
            if (!aliasWrapper) {
                throw new Error('can not get aliasWrapper');
            }
            return aliasWrapper.getValue();
        }
        /**
         * Set alias
         */
        const aliasWrapper = new wechaty_grpc_1.StringValue();
        aliasWrapper.setValue(alias || ''); // null -> '', in server, we treat '' as null
        const request = new wechaty_grpc_1.puppet.ContactAliasRequest();
        request.setId(contactId);
        request.setAlias(aliasWrapper);
        await util_1.default.promisify(this.grpc.client.contactAlias.bind(this.grpc.client))(request);
    }
    async contactPhone(contactId, phoneList) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactPhone(%s, %s)', contactId, phoneList);
        const request = new wechaty_grpc_1.puppet.ContactPhoneRequest();
        request.setContactId(contactId);
        request.setPhoneListList(phoneList);
        await util_1.default.promisify(this.grpc.client.contactPhone.bind(this.grpc.client))(request);
    }
    async contactCorporationRemark(contactId, corporationRemark) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactCorporationRemark(%s, %s)', contactId, corporationRemark);
        const corporationRemarkWrapper = new wechaty_grpc_1.StringValue();
        if (corporationRemark) {
            corporationRemarkWrapper.setValue(corporationRemark);
        }
        const request = new wechaty_grpc_1.puppet.ContactCorporationRemarkRequest();
        request.setContactId(contactId);
        request.setCorporationRemark(corporationRemarkWrapper);
        await util_1.default.promisify(this.grpc.client.contactCorporationRemark.bind(this.grpc.client))(request);
    }
    async contactDescription(contactId, description) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactDescription(%s, %s)', contactId, description);
        const descriptionWrapper = new wechaty_grpc_1.StringValue();
        if (description) {
            descriptionWrapper.setValue(description);
        }
        const request = new wechaty_grpc_1.puppet.ContactDescriptionRequest();
        request.setContactId(contactId);
        request.setDescription(descriptionWrapper);
        await util_1.default.promisify(this.grpc.client.contactDescription.bind(this.grpc.client))(request);
    }
    async contactList() {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactList()');
        const response = await util_1.default.promisify(this.grpc.client.contactList.bind(this.grpc.client))(new wechaty_grpc_1.puppet.ContactListRequest());
        return response.getIdsList();
    }
    async contactAvatar(contactId, fileBox) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactAvatar(%s)', contactId);
        /**
         * 1. set
         */
        if (fileBox) {
            const fileboxWrapper = new wechaty_grpc_1.StringValue();
            fileboxWrapper.setValue(await (0, serialize_file_box_js_1.serializeFileBox)(fileBox));
            const request = new wechaty_grpc_1.puppet.ContactAvatarRequest();
            request.setId(contactId);
            request.setFilebox(fileboxWrapper);
            await util_1.default.promisify(this.grpc.client.contactAvatar.bind(this.grpc.client))(request);
            return;
        }
        /**
         * 2. get
         */
        const request = new wechaty_grpc_1.puppet.ContactAvatarRequest();
        request.setId(contactId);
        const response = await util_1.default.promisify(this.grpc.client.contactAvatar.bind(this.grpc.client))(request);
        const textWrapper = response.getFilebox();
        if (!textWrapper) {
            throw new Error('can not get textWrapper');
        }
        const jsonText = textWrapper.getValue();
        return wechaty_puppet_1.FileBox.fromJSON(jsonText);
    }
    async contactRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactRawPayload(%s)', id);
        const cachedPayload = await this.payloadStore.contact?.get(id);
        if (cachedPayload) {
            wechaty_puppet_1.log.silly('PuppetService', 'contactRawPayload(%s) cache HIT', id);
            return cachedPayload;
        }
        const request = new wechaty_grpc_1.puppet.ContactPayloadRequest();
        request.setId(id);
        const response = await util_1.default.promisify(this.grpc.client.contactPayload.bind(this.grpc.client))(request);
        const payload = {
            address: response.getAddress(),
            alias: response.getAlias(),
            avatar: response.getAvatar(),
            city: response.getCity(),
            corporation: response.getCorporation(),
            coworker: response.getCoworker(),
            description: response.getDescription(),
            friend: response.getFriend(),
            gender: response.getGender(),
            id: response.getId(),
            name: response.getName(),
            phone: response.getPhoneList(),
            province: response.getProvince(),
            signature: response.getSignature(),
            star: response.getStar(),
            title: response.getTitle(),
            type: response.getType(),
            weixin: response.getWeixin(),
        };
        await this.payloadStore.contact?.set(id, payload);
        wechaty_puppet_1.log.silly('PuppetService', 'contactRawPayload(%s) cache SET', id);
        return payload;
    }
    async contactRawPayloadParser(payload) {
        // log.silly('PuppetService', 'contactRawPayloadParser({id:%s})', payload.id)
        // passthrough
        return payload;
    }
    async contactSelfName(name) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactSelfName(%s)', name);
        const request = new wechaty_grpc_1.puppet.ContactSelfNameRequest();
        request.setName(name);
        await util_1.default.promisify(this.grpc.client.contactSelfName.bind(this.grpc.client))(request);
    }
    async contactSelfQRCode() {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactSelfQRCode()');
        const response = await util_1.default.promisify(this.grpc.client.contactSelfQRCode.bind(this.grpc.client))(new wechaty_grpc_1.puppet.ContactSelfQRCodeRequest());
        return response.getQrcode();
    }
    async contactSelfSignature(signature) {
        wechaty_puppet_1.log.verbose('PuppetService', 'contactSelfSignature(%s)', signature);
        const request = new wechaty_grpc_1.puppet.ContactSelfSignatureRequest();
        request.setSignature(signature);
        await util_1.default.promisify(this.grpc.client.contactSelfSignature.bind(this.grpc.client))(request);
    }
    /**
     *
     * Conversation
     *
     */
    conversationReadMark(conversationId, hasRead = true) {
        wechaty_puppet_1.log.verbose('PuppetService', 'conversationMarkRead(%s, %s)', conversationId, hasRead);
        (0, wechaty_puppet_1.throwUnsupportedError)('not implemented. See https://github.com/wechaty/wechaty-puppet/pull/132');
    }
    /**
     *
     * Message
     *
     */
    async messageMiniProgram(messageId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageMiniProgram(%s)', messageId);
        const request = new wechaty_grpc_1.puppet.MessageMiniProgramRequest();
        request.setId(messageId);
        const response = await util_1.default.promisify(this.grpc.client.messageMiniProgram.bind(this.grpc.client))(request);
        const jsonText = response.getMiniProgram();
        const payload = JSON.parse(jsonText);
        return payload;
    }
    async messageImage(messageId, imageType) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageImage(%s, %s[%s])', messageId, imageType, wechaty_puppet_1.ImageType[imageType]);
        const request = new wechaty_grpc_1.puppet.MessageImageStreamRequest();
        request.setId(messageId);
        request.setType(imageType);
        if (!this.grpc?.client) {
            throw new Error('Can not get image from message since no grpc client.');
        }
        const pbStream = this.grpc.client.messageImageStream(request);
        const fileBox = await (0, mod_js_1.unpackFileBoxFromPb)(pbStream);
        // const fileBoxChunkStream = unpackFileBoxChunk(stream)
        // return unpackFileBox(fileBoxChunkStream)
        return fileBox;
    }
    async messageContact(messageId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageContact(%s)', messageId);
        const request = new wechaty_grpc_1.puppet.MessageContactRequest();
        request.setId(messageId);
        const response = await util_1.default.promisify(this.grpc.client.messageContact.bind(this.grpc.client))(request);
        const contactId = response.getId();
        return contactId;
    }
    async messageSendMiniProgram(conversationId, miniProgramPayload) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageSendMiniProgram(%s)', conversationId, JSON.stringify(miniProgramPayload));
        const request = new wechaty_grpc_1.puppet.MessageSendMiniProgramRequest();
        request.setConversationId(conversationId);
        request.setMiniProgram(JSON.stringify(miniProgramPayload));
        const response = await util_1.default.promisify(this.grpc.client.messageSendMiniProgram.bind(this.grpc.client))(request);
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
    async messageRecall(messageId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageRecall(%s)', messageId);
        const request = new wechaty_grpc_1.puppet.MessageRecallRequest();
        request.setId(messageId);
        const response = await util_1.default.promisify(this.grpc.client.messageRecall.bind(this.grpc.client))(request);
        return response.getSuccess();
    }
    async messageFile(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageFile(%s)', id);
        const request = new wechaty_grpc_1.puppet.MessageFileStreamRequest();
        request.setId(id);
        if (!this.grpc?.client) {
            throw new Error('Can not get file from message since no grpc client.');
        }
        const pbStream = this.grpc.client.messageFileStream(request);
        // const fileBoxChunkStream = unpackFileBoxChunk(pbStream)
        // return unpackFileBox(fileBoxChunkStream)
        const fileBox = await (0, mod_js_1.unpackFileBoxFromPb)(pbStream);
        return fileBox;
    }
    async messageForward(conversationId, messageId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageForward(%s, %s)', conversationId, messageId);
        const request = new wechaty_grpc_1.puppet.MessageForwardRequest();
        request.setConversationId(conversationId);
        request.setMessageId(messageId);
        const response = await util_1.default.promisify(this.grpc.client.messageForward.bind(this.grpc.client))(request);
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
    async messageRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageRawPayload(%s)', id);
        // const cachedPayload = await this.payloadStore.message?.get(id)
        // if (cachedPayload) {
        //   log.silly('PuppetService', 'messageRawPayload(%s) cache HIT', id)
        //   return cachedPayload
        // }
        const request = new wechaty_grpc_1.puppet.MessagePayloadRequest();
        request.setId(id);
        const response = await util_1.default.promisify(this.grpc.client.messagePayload.bind(this.grpc.client))(request);
        const payload = {
            filename: response.getFilename(),
            fromId: response.getFromId(),
            id: response.getId(),
            mentionIdList: response.getMentionIdsList(),
            roomId: response.getRoomId(),
            text: response.getText(),
            timestamp: response.getTimestamp(),
            toId: response.getToId(),
            type: response.getType(),
        };
        // log.silly('PuppetService', 'messageRawPayload(%s) cache SET', id)
        // await this.payloadStore.message?.set(id, payload)
        return payload;
    }
    async messageRawPayloadParser(payload) {
        // log.silly('PuppetService', 'messagePayload({id:%s})', payload.id)
        // passthrough
        return payload;
    }
    async messageSendText(conversationId, text, mentionIdList) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageSend(%s, %s)', conversationId, text);
        const request = new wechaty_grpc_1.puppet.MessageSendTextRequest();
        request.setConversationId(conversationId);
        request.setText(text);
        if (typeof mentionIdList !== 'undefined') {
            request.setMentionalIdsList(mentionIdList);
        }
        const response = await util_1.default.promisify(this.grpc.client.messageSendText.bind(this.grpc.client))(request);
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
    async messageSendFile(conversationId, file) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageSend(%s, %s)', conversationId, file);
        const fileBoxStreamTypes = [
            file_box_1.FileBoxType.Base64,
            file_box_1.FileBoxType.Buffer,
            file_box_1.FileBoxType.File,
            file_box_1.FileBoxType.Stream,
        ];
        if (fileBoxStreamTypes.includes(file.type())) {
            return this.messageSendFileStream(conversationId, file);
        }
        else {
            return this.messageSendFileNonStream(conversationId, file);
        }
    }
    async messageSendContact(conversationId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageSend("%s", %s)', conversationId, contactId);
        const request = new wechaty_grpc_1.puppet.MessageSendContactRequest();
        request.setConversationId(conversationId);
        request.setContactId(contactId);
        const response = await util_1.default.promisify(this.grpc.client.messageSendContact.bind(this.grpc.client))(request);
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
    async messageSendUrl(conversationId, urlLinkPayload) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageSendUrl("%s", %s)', conversationId, JSON.stringify(urlLinkPayload));
        const request = new wechaty_grpc_1.puppet.MessageSendUrlRequest();
        request.setConversationId(conversationId);
        request.setUrlLink(JSON.stringify(urlLinkPayload));
        const response = await util_1.default.promisify(this.grpc.client.messageSendUrl.bind(this.grpc.client))(request);
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
    async messageUrl(messageId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'messageUrl(%s)', messageId);
        const request = new wechaty_grpc_1.puppet.MessageUrlRequest();
        request.setId(messageId);
        const response = await util_1.default.promisify(this.grpc.client.messageUrl.bind(this.grpc.client))(request);
        const jsonText = response.getUrlLink();
        const payload = JSON.parse(jsonText);
        return payload;
    }
    /**
     *
     * Room
     *
     */
    async roomRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomRawPayload(%s)', id);
        const cachedPayload = await this.payloadStore.room?.get(id);
        if (cachedPayload) {
            wechaty_puppet_1.log.silly('PuppetService', 'roomRawPayload(%s) cache HIT', id);
            return cachedPayload;
        }
        const request = new wechaty_grpc_1.puppet.RoomPayloadRequest();
        request.setId(id);
        const response = await util_1.default.promisify(this.grpc.client.roomPayload.bind(this.grpc.client))(request);
        const payload = {
            adminIdList: response.getAdminIdsList(),
            avatar: response.getAvatar(),
            id: response.getId(),
            memberIdList: response.getMemberIdsList(),
            ownerId: response.getOwnerId(),
            topic: response.getTopic(),
        };
        await this.payloadStore.room?.set(id, payload);
        wechaty_puppet_1.log.silly('PuppetService', 'roomRawPayload(%s) cache SET', id);
        return payload;
    }
    async roomRawPayloadParser(payload) {
        // log.silly('PuppetService', 'roomRawPayloadParser({id:%s})', payload.id)
        // passthrough
        return payload;
    }
    async roomList() {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomList()');
        const response = await util_1.default.promisify(this.grpc.client.roomList.bind(this.grpc.client))(new wechaty_grpc_1.puppet.RoomListRequest());
        return response.getIdsList();
    }
    async roomDel(roomId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomDel(%s, %s)', roomId, contactId);
        const request = new wechaty_grpc_1.puppet.RoomDelRequest();
        request.setId(roomId);
        request.setContactId(contactId);
        await util_1.default.promisify(this.grpc.client.roomDel.bind(this.grpc.client))(request);
    }
    async roomAvatar(roomId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomAvatar(%s)', roomId);
        const request = new wechaty_grpc_1.puppet.RoomAvatarRequest();
        request.setId(roomId);
        const response = await util_1.default.promisify(this.grpc.client.roomAvatar.bind(this.grpc.client))(request);
        const jsonText = response.getFilebox();
        return wechaty_puppet_1.FileBox.fromJSON(jsonText);
    }
    async roomAdd(roomId, contactId, inviteOnly) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomAdd(%s, %s)', roomId, contactId);
        const request = new wechaty_grpc_1.puppet.RoomAddRequest();
        request.setId(roomId);
        request.setContactId(contactId);
        request.setInviteOnly(inviteOnly);
        await util_1.default.promisify(this.grpc.client.roomAdd.bind(this.grpc.client))(request);
    }
    async roomTopic(roomId, topic) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomTopic(%s, %s)', roomId, topic);
        /**
         * Get
         */
        if (typeof topic === 'undefined') {
            const request = new wechaty_grpc_1.puppet.RoomTopicRequest();
            request.setId(roomId);
            const response = await util_1.default.promisify(this.grpc.client.roomTopic.bind(this.grpc.client))(request);
            const topicWrapper = response.getTopic();
            if (topicWrapper) {
                return topicWrapper.getValue();
            }
            return '';
        }
        /**
         * Set
         */
        const topicWrapper = new wechaty_grpc_1.StringValue();
        topicWrapper.setValue(topic);
        const request = new wechaty_grpc_1.puppet.RoomTopicRequest();
        request.setId(roomId);
        request.setTopic(topicWrapper);
        await util_1.default.promisify(this.grpc.client.roomTopic.bind(this.grpc.client))(request);
    }
    async roomCreate(contactIdList, topic) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomCreate(%s, %s)', contactIdList, topic);
        const request = new wechaty_grpc_1.puppet.RoomCreateRequest();
        request.setContactIdsList(contactIdList);
        request.setTopic(topic);
        const response = await util_1.default.promisify(this.grpc.client.roomCreate.bind(this.grpc.client))(request);
        return response.getId();
    }
    async roomQuit(roomId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomQuit(%s)', roomId);
        const request = new wechaty_grpc_1.puppet.RoomQuitRequest();
        request.setId(roomId);
        await util_1.default.promisify(this.grpc.client.roomQuit.bind(this.grpc.client))(request);
    }
    async roomQRCode(roomId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomQRCode(%s)', roomId);
        const request = new wechaty_grpc_1.puppet.RoomQRCodeRequest();
        request.setId(roomId);
        const response = await util_1.default.promisify(this.grpc.client.roomQRCode.bind(this.grpc.client))(request);
        return response.getQrcode();
    }
    async roomMemberList(roomId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomMemberList(%s)', roomId);
        const request = new wechaty_grpc_1.puppet.RoomMemberListRequest();
        request.setId(roomId);
        const response = await util_1.default.promisify(this.grpc.client.roomMemberList.bind(this.grpc.client))(request);
        return response.getMemberIdsList();
    }
    async roomMemberRawPayload(roomId, contactId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomMemberRawPayload(%s, %s)', roomId, contactId);
        const id = this.payloadStore.roomMemberId(roomId, contactId);
        const cachedPayload = await this.payloadStore.roomMember?.get(id);
        if (cachedPayload) {
            wechaty_puppet_1.log.silly('PuppetService', 'roomMemberRawPayload(%s) cache HIT', id);
            return cachedPayload;
        }
        const request = new wechaty_grpc_1.puppet.RoomMemberPayloadRequest();
        request.setId(roomId);
        request.setMemberId(contactId);
        const response = await util_1.default.promisify(this.grpc.client.roomMemberPayload.bind(this.grpc.client))(request);
        const payload = {
            avatar: response.getAvatar(),
            id: response.getId(),
            inviterId: response.getInviterId(),
            name: response.getName(),
            roomAlias: response.getRoomAlias(),
        };
        await this.payloadStore.roomMember?.set(id, payload);
        wechaty_puppet_1.log.silly('PuppetService', 'roomMemberRawPayload(%s) cache SET', id);
        return payload;
    }
    async roomMemberRawPayloadParser(payload) {
        // log.silly('PuppetService', 'roomMemberRawPayloadParser({id:%s})', payload.id)
        // passthrough
        return payload;
    }
    async roomAnnounce(roomId, text) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomAnnounce(%s%s)', roomId, typeof text === 'undefined'
            ? ''
            : `, ${text}`);
        /**
         * Set
         */
        if (text) {
            const textWrapper = new wechaty_grpc_1.StringValue();
            textWrapper.setValue(text);
            const request = new wechaty_grpc_1.puppet.RoomAnnounceRequest();
            request.setId(roomId);
            request.setText(textWrapper);
            await util_1.default.promisify(this.grpc.client.roomAnnounce.bind(this.grpc.client))(request);
            return;
        }
        /**
         * Get
         */
        const request = new wechaty_grpc_1.puppet.RoomAnnounceRequest();
        request.setId(roomId);
        const response = await util_1.default.promisify(this.grpc.client.roomAnnounce.bind(this.grpc.client))(request);
        const textWrapper = response.getText();
        if (textWrapper) {
            return textWrapper.getValue();
        }
        return '';
    }
    async roomInvitationAccept(roomInvitationId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomInvitationAccept(%s)', roomInvitationId);
        const request = new wechaty_grpc_1.puppet.RoomInvitationAcceptRequest();
        request.setId(roomInvitationId);
        await util_1.default.promisify(this.grpc.client.roomInvitationAccept.bind(this.grpc.client))(request);
    }
    async roomInvitationRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'roomInvitationRawPayload(%s)', id);
        const request = new wechaty_grpc_1.puppet.RoomInvitationPayloadRequest();
        request.setId(id);
        const response = await util_1.default.promisify(this.grpc.client.roomInvitationPayload.bind(this.grpc.client))(request);
        const payload = {
            avatar: response.getAvatar(),
            id: response.getId(),
            invitation: response.getInvitation(),
            inviterId: response.getInviterId(),
            memberCount: response.getMemberCount(),
            memberIdList: response.getMemberIdsList(),
            receiverId: response.getReceiverId(),
            timestamp: response.getTimestamp(),
            topic: response.getTopic(),
        };
        return payload;
    }
    async roomInvitationRawPayloadParser(payload) {
        // log.silly('PuppetService', 'roomInvitationRawPayloadParser({id:%s})', payload.id)
        // passthrough
        return payload;
    }
    /**
     *
     * Friendship
     *
     */
    async friendshipSearchPhone(phone) {
        wechaty_puppet_1.log.verbose('PuppetService', 'friendshipSearchPhone(%s)', phone);
        const request = new wechaty_grpc_1.puppet.FriendshipSearchPhoneRequest();
        request.setPhone(phone);
        const response = await util_1.default.promisify(this.grpc.client.friendshipSearchPhone.bind(this.grpc.client))(request);
        const contactIdWrapper = response.getContactId();
        if (contactIdWrapper) {
            return contactIdWrapper.getValue();
        }
        return null;
    }
    async friendshipSearchWeixin(weixin) {
        wechaty_puppet_1.log.verbose('PuppetService', 'friendshipSearchWeixin(%s)', weixin);
        const request = new wechaty_grpc_1.puppet.FriendshipSearchWeixinRequest();
        request.setWeixin(weixin);
        const response = await util_1.default.promisify(this.grpc.client.friendshipSearchWeixin.bind(this.grpc.client))(request);
        const contactIdWrapper = response.getContactId();
        if (contactIdWrapper) {
            return contactIdWrapper.getValue();
        }
        return null;
    }
    async friendshipRawPayload(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'friendshipRawPayload(%s)', id);
        const request = new wechaty_grpc_1.puppet.FriendshipPayloadRequest();
        request.setId(id);
        const response = await util_1.default.promisify(this.grpc.client.friendshipPayload.bind(this.grpc.client))(request);
        const payload = {
            contactId: response.getContactId(),
            hello: response.getHello(),
            id,
            scene: response.getScene(),
            stranger: response.getStranger(),
            ticket: response.getTicket(),
            type: response.getType(),
        }; // FIXME: Huan(202002)
        return payload;
    }
    async friendshipRawPayloadParser(payload) {
        // log.silly('PuppetService', 'friendshipRawPayloadParser({id:%s})', payload.id)
        // passthrough
        return payload;
    }
    async friendshipAdd(contactId, options) {
        wechaty_puppet_1.log.verbose('PuppetService', 'friendshipAdd(%s, %s)', contactId, JSON.stringify(options));
        const request = new wechaty_grpc_1.puppet.FriendshipAddRequest();
        request.setContactId(contactId);
        // FIXME: for backward compatibility, need to be removed after all puppet has updated.
        if (typeof options === 'string') {
            request.setHello(options);
        }
        else {
            request.setHello(options.hello);
            const contactIdWrapper = new wechaty_grpc_1.StringValue();
            contactIdWrapper.setValue(options.contactId || '');
            const roomIdWrapper = new wechaty_grpc_1.StringValue();
            roomIdWrapper.setValue(options.roomId || '');
            request.setSourceRoomId(roomIdWrapper);
            request.setSourceContactId(contactIdWrapper);
        }
        await util_1.default.promisify(this.grpc.client.friendshipAdd.bind(this.grpc.client))(request);
    }
    async friendshipAccept(friendshipId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'friendshipAccept(%s)', friendshipId);
        const request = new wechaty_grpc_1.puppet.FriendshipAcceptRequest();
        request.setId(friendshipId);
        await util_1.default.promisify(this.grpc.client.friendshipAccept.bind(this.grpc.client))(request);
    }
    /**
     *
     * Tag
     *
     */
    // add a tag for a Contact. Create it first if it not exist.
    async tagContactAdd(id, contactId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'tagContactAdd(%s, %s)', id, contactId);
        const request = new wechaty_grpc_1.puppet.TagContactAddRequest();
        request.setId(id);
        request.setContactId(contactId);
        await util_1.default.promisify(this.grpc.client.tagContactAdd.bind(this.grpc.client))(request);
    }
    // remove a tag from the Contact
    async tagContactRemove(id, contactId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'tagContactRemove(%s, %s)', id, contactId);
        const request = new wechaty_grpc_1.puppet.TagContactRemoveRequest();
        request.setId(id);
        request.setContactId(contactId);
        await util_1.default.promisify(this.grpc.client.tagContactRemove.bind(this.grpc.client))(request);
    }
    // delete a tag from Wechat
    async tagContactDelete(id) {
        wechaty_puppet_1.log.verbose('PuppetService', 'tagContactDelete(%s)', id);
        const request = new wechaty_grpc_1.puppet.TagContactDeleteRequest();
        request.setId(id);
        await util_1.default.promisify(this.grpc.client.tagContactDelete.bind(this.grpc.client))(request);
    }
    // get tags from a specific Contact
    async tagContactList(contactId) {
        wechaty_puppet_1.log.verbose('PuppetService', 'tagContactList(%s)', contactId);
        const request = new wechaty_grpc_1.puppet.TagContactListRequest();
        if (typeof contactId !== 'undefined') {
            const contactIdWrapper = new wechaty_grpc_1.StringValue();
            contactIdWrapper.setValue(contactId);
            request.setContactId(contactIdWrapper);
        }
        const response = await util_1.default.promisify(this.grpc.client.tagContactList.bind(this.grpc.client))(request);
        return response.getIdsList();
    }
    async messageSendFileStream(conversationId, file) {
        const request = await (0, mod_js_1.packConversationIdFileBoxToPb)(wechaty_grpc_1.puppet.MessageSendFileStreamRequest)(conversationId, file);
        const response = await new Promise((resolve, reject) => {
            if (!this.grpc?.client) {
                reject(new Error('Can not send message file since no grpc client.'));
                return;
            }
            const stream = this.grpc.client.messageSendFileStream((err, response) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(response);
                }
            });
            request.pipe(stream);
        });
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
    async messageSendFileNonStream(conversationId, file) {
        const request = new wechaty_grpc_1.puppet.MessageSendFileRequest();
        request.setConversationId(conversationId);
        request.setFilebox(JSON.stringify(file));
        const response = await util_1.default.promisify(this.grpc.client.messageSendFile.bind(this.grpc.client))(request);
        const messageIdWrapper = response.getId();
        if (messageIdWrapper) {
            return messageIdWrapper.getValue();
        }
    }
}
exports.PuppetService = PuppetService;
PuppetService.VERSION = config_js_1.VERSION;
exports.default = PuppetService;
//# sourceMappingURL=puppet-service.js.map