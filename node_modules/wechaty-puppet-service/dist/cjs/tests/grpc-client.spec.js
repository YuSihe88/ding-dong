#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const wechaty_puppet_1 = require("wechaty-puppet");
const wechaty_puppet_mock_1 = __importDefault(require("wechaty-puppet-mock"));
const grpc_client_js_1 = require("../src/client/grpc-client.js");
const mod_js_1 = require("../src/mod.js");
(0, tstest_1.test)('GrpcClient with TLS and valid token', async (t) => {
    const TOKEN = 'insecure_UUIDv4';
    const ENDPOINT = '0.0.0.0:8788';
    /**
     * Puppet Server
     */
    const serverOptions = {
        endpoint: ENDPOINT,
        puppet: new wechaty_puppet_mock_1.default(),
        token: TOKEN,
    };
    const puppetServer = new mod_js_1.PuppetServer(serverOptions);
    await puppetServer.start();
    /**
     * Puppet Service Client
     */
    const puppetOptions = {
        endpoint: ENDPOINT,
        token: TOKEN,
    };
    const validTokenPuppet = new grpc_client_js_1.GrpcClient(puppetOptions);
    try {
        await validTokenPuppet.start();
        t.pass('should work with TLS and valid token');
    }
    catch (e) {
        console.error(e);
        t.fail('should not reject for a valid token & tls');
    }
    finally {
        try {
            await validTokenPuppet.stop();
        }
        catch (_) { }
    }
    await puppetServer.stop();
});
(0, tstest_1.test)('GrpcClient with invalid TLS options', async (t) => {
    const TOKEN = 'uuid_UUIDv4';
    const ENDPOINT = '0.0.0.0:8788';
    /**
     * Puppet Server
     */
    const serverOptions = {
        endpoint: ENDPOINT,
        puppet: new wechaty_puppet_mock_1.default(),
        token: TOKEN,
    };
    const puppetServer = new mod_js_1.PuppetServer(serverOptions);
    await puppetServer.start();
    /**
     * Grpc Client
     */
    const puppetOptions = {
        endpoint: ENDPOINT,
        tls: {
            disable: true,
        },
        token: TOKEN,
    };
    const grpcClient = new grpc_client_js_1.GrpcClient(puppetOptions);
    grpcClient.on('error', e => console.info('###noTlsPuppet.on(error):', e));
    // Disable error log
    const level = wechaty_puppet_1.log.level();
    wechaty_puppet_1.log.level('silent');
    try {
        await grpcClient.start();
        t.fail('should throw for no-tls client to tls-server instead of not running to here');
    }
    catch (e) {
        t.pass('should throw for non-tls client to tls-server with noTlsInsecure: true');
    }
    finally {
        wechaty_puppet_1.log.level(level);
        try {
            await grpcClient.stop();
        }
        catch (_) { }
    }
    await puppetServer.stop();
});
(0, tstest_1.test)('GrpcClient with invalid token', async (t) => {
    const endpoint = '0.0.0.0:8788';
    /**
     * Puppet Server
     */
    const serverOptions = {
        endpoint,
        puppet: new wechaty_puppet_mock_1.default(),
        token: 'insecure_UUIDv4',
    };
    const puppetServer = new mod_js_1.PuppetServer(serverOptions);
    await puppetServer.start();
    /**
     * Puppet Service Client
     */
    const puppetOptions = {
        endpoint,
        /**
         * Put a random token for invalid the client token
         *  https://stackoverflow.com/a/8084248/1123955
         */
        token: 'insecure_' + Math.random().toString(36),
    };
    const invalidTokenPuppet = new grpc_client_js_1.GrpcClient(puppetOptions);
    try {
        await invalidTokenPuppet.start();
        t.fail('should throw for invalid token instead of not running to here');
    }
    catch (e) {
        t.pass('should throw for invalid random token');
    }
    finally {
        try {
            await invalidTokenPuppet.stop();
        }
        catch (_) { }
    }
    await puppetServer.stop();
});
//# sourceMappingURL=grpc-client.spec.js.map