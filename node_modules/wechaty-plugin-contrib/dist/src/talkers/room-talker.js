"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roomTalker = void 0;
/* eslint-disable brace-style */
const wechaty_1 = require("wechaty");
const mustache_1 = __importDefault(require("mustache"));
function roomTalker(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'roomTalker(%s)', JSON.stringify(options));
    if (!options) {
        return () => undefined;
    }
    if (!Array.isArray(options)) {
        options = [options];
    }
    const optionList = options;
    return async function talkRoom(room, contact, mustacheView) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'roomTalker() talkRoom(%s, %s, %s)', room, contact || '', mustacheView
            ? JSON.stringify(mustacheView)
            : '');
        for (const option of optionList) {
            let msg;
            if (option instanceof Function) {
                msg = await option(room, contact);
            }
            else {
                msg = option;
            }
            if (!msg) {
                continue;
            }
            if (typeof msg === 'string') {
                if (mustacheView) {
                    msg = mustache_1.default.render(msg, mustacheView);
                }
                if (contact) {
                    await room.say(msg, contact);
                }
                else {
                    await room.say(msg);
                }
            }
            else {
                /**
                 *  FIXME(huan): https://github.com/microsoft/TypeScript/issues/14107
                 */
                await room.say(msg);
            }
            await room.wechaty.sleep(1000);
        }
    };
}
exports.roomTalker = roomTalker;
//# sourceMappingURL=room-talker.js.map