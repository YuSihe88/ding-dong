"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contactTalker = void 0;
const wechaty_1 = require("wechaty");
const mustache_1 = __importDefault(require("mustache"));
function contactTalker(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'contactTalker(%s)', JSON.stringify(options));
    if (!options) {
        return () => undefined;
    }
    if (!Array.isArray(options)) {
        options = [options];
    }
    const optionList = options;
    return async function talkContact(contact, room, mustacheView) {
        wechaty_1.log.silly('WechatyPluginContrib', 'contactTalker() talkContact(%s, %s)', contact, mustacheView
            ? JSON.stringify(mustacheView)
            : '');
        for (const option of optionList) {
            let msg;
            if (option instanceof Function) {
                msg = await option(contact, room);
            }
            else {
                msg = option;
            }
            if (!msg) {
                continue;
            }
            if (typeof msg === 'string') {
                if (mustacheView) {
                    msg = mustache_1.default.render(msg, mustacheView);
                }
                await contact.say(msg);
            }
            else {
                /**
                 *  FIXME(huan): https://github.com/microsoft/TypeScript/issues/14107
                 */
                await contact.say(msg);
            }
            await contact.wechaty.sleep(1000);
        }
    };
}
exports.contactTalker = contactTalker;
//# sourceMappingURL=contact-talker.js.map