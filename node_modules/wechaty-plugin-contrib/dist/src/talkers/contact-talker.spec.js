#!/usr/bin/env ts-node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = __importDefault(require("tstest"));
const sinon_1 = __importDefault(require("sinon"));
const contact_talker_1 = require("./contact-talker");
tstest_1.default('contactTalker()', async (t) => {
    const spy1 = sinon_1.default.spy();
    const spy2 = sinon_1.default.spy();
    const spy3 = sinon_1.default.spy();
    const spy4 = sinon_1.default.spy();
    const EXPECTED_TEXT = 'text';
    const OPTIONS_TEXT = EXPECTED_TEXT;
    const OPTIONS_FUNCTION = spy1;
    const OPTIONS_FUNCTION_LIST = [spy2, spy3];
    const mockContact = {
        say: spy4,
        wechaty: {
            sleep: () => undefined,
        },
    };
    await contact_talker_1.contactTalker(OPTIONS_TEXT)(mockContact);
    t.true(spy4.called, 'should called the contact.say');
    t.equal(spy4.args[0][0], EXPECTED_TEXT, 'should say the expected text');
    await contact_talker_1.contactTalker(OPTIONS_FUNCTION)(mockContact);
    t.true(spy1.called, 'should called the function');
    t.equal(spy1.args[0][0], mockContact, 'should called the function with contact');
    const talkContact = contact_talker_1.contactTalker(OPTIONS_FUNCTION_LIST);
    await talkContact(mockContact);
    t.true(spy2.called, 'should called the functions 1');
    t.true(spy3.called, 'should called the functions 2');
    t.equal(spy2.args[0][0], mockContact, 'should called the functions 1 with contact');
    t.equal(spy3.args[0][0], mockContact, 'should called the functions 2 with contact');
});
tstest_1.default('contactTalker() with mustache', async (t) => {
    const EXPECTED_TEXT = 'Hello, world!';
    const OPTIONS_TEXT = 'Hello, {{ name }}!';
    const VAR = 'world';
    const spy = sinon_1.default.spy();
    const mockContact = {
        say: spy,
        wechaty: {
            sleep: () => undefined,
        },
    };
    const view = { name: VAR };
    const talkContact = contact_talker_1.contactTalker(OPTIONS_TEXT);
    await talkContact(mockContact, undefined, view);
    t.true(spy.called, 'should called the contact.say');
    t.equal(spy.args[0][0], EXPECTED_TEXT, 'should say the expected text');
});
//# sourceMappingURL=contact-talker.spec.js.map