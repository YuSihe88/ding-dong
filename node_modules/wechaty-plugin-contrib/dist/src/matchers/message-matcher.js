"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageMatcher = void 0;
const wechaty_1 = require("wechaty");
function messageMatcher(matcherOptions) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'messageMatcher(%s)', JSON.stringify(matcherOptions));
    if (!matcherOptions) {
        return () => Promise.resolve(false);
    }
    if (!Array.isArray(matcherOptions)) {
        matcherOptions = [matcherOptions];
    }
    const matcherOptionList = matcherOptions;
    return async function matchMessage(message) {
        var _a, _b;
        wechaty_1.log.verbose('WechatyPluginContrib', 'messageMatcher() matchMessage(%s)', message);
        let isMatch = false;
        for (const option of matcherOptionList) {
            if (typeof option === 'boolean') {
                isMatch = option;
            }
            else if (typeof option === 'string') {
                const idCheckList = [
                    message.talker().id,
                    (_a = message.room()) === null || _a === void 0 ? void 0 : _a.id,
                ];
                isMatch = idCheckList.includes(option);
            }
            else if (option instanceof RegExp) {
                const text = await message.mentionText();
                const textCheckList = [
                    text,
                    message.talker().name(),
                    await ((_b = message.room()) === null || _b === void 0 ? void 0 : _b.topic()),
                ];
                isMatch = textCheckList.some(text => text && option.test(text));
            }
            else if (typeof option === 'function') {
                isMatch = await option(message);
            }
            else {
                throw new Error('unknown matcher ' + option);
            }
            if (isMatch) {
                return true;
            }
        }
        // no match
        return false;
    };
}
exports.messageMatcher = messageMatcher;
//# sourceMappingURL=message-matcher.js.map