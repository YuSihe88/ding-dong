"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMatchConfig = exports.DingDong = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: Apr 2020
 */
/* eslint-disable sort-keys */
const wechaty_1 = require("wechaty");
const matchers = __importStar(require("../../matchers/mod"));
const talkers = __importStar(require("../../talkers/mod"));
const DEFAULT_CONFIG = {
    ding: 'ding',
    dong: 'dong',
    contact: true,
    mention: false,
    room: true,
    self: true,
};
const isMatchConfig = (config) => {
    wechaty_1.log.verbose('DingDong', ' isMatchConfig(%s)', JSON.stringify(config));
    const normalizedConfig = {
        ...DEFAULT_CONFIG,
        ...config,
    };
    const matchContact = matchers.contactMatcher(normalizedConfig.contact);
    const matchRoom = matchers.roomMatcher(normalizedConfig.room);
    const matchDing = matchers.stringMatcher(normalizedConfig.ding);
    return async function isMatch(message) {
        wechaty_1.log.verbose('DingDong', 'isMatchConfig() isMatch(%s)', message.toString());
        const room = message.room();
        if (room) {
            if (!await matchRoom(room)) {
                return false;
            }
            if (normalizedConfig.mention) {
                if (!(await message.mentionSelf())) {
                    return false;
                }
            }
        }
        else {
            if (!await matchContact(message.talker())) {
                return false;
            }
        }
        if (!normalizedConfig.self && message.self()) {
            return false;
        }
        const text = await message.mentionText();
        if (!await matchDing(text)) {
            return false;
        }
        return true;
    };
};
exports.isMatchConfig = isMatchConfig;
function DingDong(config) {
    wechaty_1.log.verbose('DingDong', 'DingDong(%s)', typeof config === 'undefined' ? ''
        : typeof config === 'function' ? 'function'
            : JSON.stringify(config));
    const normalizedConfig = {
        ...DEFAULT_CONFIG,
        ...config,
    };
    const isMatch = isMatchConfig(normalizedConfig);
    const talkDong = talkers.messageTalker(normalizedConfig.dong);
    return function DingDongPlugin(wechaty) {
        wechaty_1.log.verbose('DingDong', 'installing on %s ...', wechaty);
        wechaty.on('message', async (message) => {
            if (message.type() !== wechaty_1.Message.Type.Text) {
                return;
            }
            if (!await isMatch(message)) {
                return;
            }
            await talkDong(message);
        });
    };
}
exports.DingDong = DingDong;
//# sourceMappingURL=ding-dong.js.map