"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomInviter = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: Jun 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../talkers/mod");
const mod_2 = require("../matchers/mod");
const mod_3 = require("../finders/mod");
function RoomInviter(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviter("%s")', JSON.stringify(config));
    const isMatchPassword = mod_2.stringMatcher(config.password);
    const showRule = mod_1.contactTalker(config.rule);
    const getRoomList = mod_3.roomFinder(config.room);
    const warnRepeat = mod_1.contactTalker(config.repeat);
    const doWelcome = mod_1.roomTalker(config.welcome);
    return function RoomInviterPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviter installing on %s ...', wechaty);
        const welcomeId = {};
        wechaty.on('room-join', async (room, inviteeList, inviter) => {
            if (inviter.id !== wechaty.userSelf().id) {
                return;
            }
            if (!(room.id in welcomeId)) {
                return;
            }
            for (const contact of inviteeList) {
                if (contact.id in welcomeId[room.id]) {
                    delete welcomeId[room.id][contact.id];
                    /**
                      * Huan(202008): Sleep 15 seconds before greeting:
                      *   1. The group members need some time to sync with server before they can see the invitee has joined
                      *   2. A short delay before greeting will improve the experience for the invitee (I guess?)
                      */
                    await room.wechaty.sleep(15 * 1000);
                    await doWelcome(room, contact);
                }
            }
        });
        wechaty.on('message', async (message) => {
            wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin wechaty.on(message) %s', message);
            if (message.room() || message.self()) {
                return;
            }
            if (message.type() !== wechaty.Message.Type.Text) {
                return;
            }
            if (!await isMatchPassword(message.text())) {
                return;
            }
            const contact = message.talker();
            if (!contact) {
                return;
            }
            await showRule(contact);
            await wechaty.sleep(1000);
            const roomList = await getRoomList(wechaty);
            if (roomList.length <= 0) {
                wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin wechaty.on(message) getRoomList() empty');
                return;
            }
            const targetRoom = await selectRoomWithLeastMembers(roomList);
            wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin inviting %s to %s', contact, targetRoom);
            if (await targetRoom.has(contact)) {
                wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin %s has already in %s', contact, targetRoom);
                await warnRepeat(contact, targetRoom);
            }
            /**
              * Set to trigger the welcome message
              */
            welcomeId[targetRoom.id] = {
                ...welcomeId[targetRoom.id],
                [contact.id]: true,
            };
            await targetRoom.add(contact);
            await wechaty.sleep(1000);
        });
    };
}
exports.RoomInviter = RoomInviter;
async function selectRoomWithLeastMembers(roomList) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin selectRoomWithLeastMembers(roomList.length=%s)', roomList.length);
    if (roomList.length <= 0) {
        throw new Error('roomList is empty');
    }
    const roomMemberNumList = await Promise.all(roomList.map(room => room.memberAll()
        .then(list => list.length)));
    let info = '';
    for (let i = 0; i < roomList.length; i++) {
        const topic = await roomList[i].topic();
        const num = roomMemberNumList[i];
        info += `${topic}(${num}),`;
    }
    wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin selectRoomWithLeastMembers() %s', info);
    const minNum = Math.min(...roomMemberNumList);
    const minIdx = roomMemberNumList.indexOf(minNum);
    return roomList[minIdx];
}
//# sourceMappingURL=room-inviter.js.map