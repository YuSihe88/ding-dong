"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatOps = exports.isMatchConfig = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: May 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../matchers/mod");
const DEFAULT_CONFIG = {
    contact: true,
    mention: true,
};
const isMatchConfig = (config) => {
    wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps isMatchConfig(%s)', JSON.stringify(config));
    const normalizedConfig = {
        ...DEFAULT_CONFIG,
        ...config,
    };
    const matchWhitelist = normalizedConfig.whitelist ? mod_1.messageMatcher(normalizedConfig.whitelist) : () => false;
    const matchBlacklist = normalizedConfig.blacklist ? mod_1.messageMatcher(normalizedConfig.blacklist) : () => false;
    return async function isMatch(message) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps isMatchConfig(%s) isMatch(%s)', JSON.stringify(config), message.toString());
        if (message.self()) {
            return false;
        }
        if (await matchWhitelist(message)) {
            return true;
        }
        if (await matchBlacklist(message)) {
            return false;
        }
        if (normalizedConfig.contact) {
            if (!message.room()) {
                wechaty_1.log.silly('WechatyPluginContrib', 'ChatOps isMatchConfig: match [dm]');
                return true;
            }
        }
        if (normalizedConfig.mention) {
            if (message.room() && await message.mentionSelf()) {
                wechaty_1.log.silly('WechatyPluginContrib', 'ChatOps isMatchConfig: match [at]');
                return true;
            }
        }
        return false;
    };
};
exports.isMatchConfig = isMatchConfig;
function ChatOps(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps(%s)', typeof config === 'undefined' ? ''
        : typeof config === 'function' ? 'function'
            : JSON.stringify(config));
    const isMatch = exports.isMatchConfig(config);
    return function ChatOpsPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps installing on %s ...', wechaty);
        let chatopsRoom;
        wechaty.on('message', async (message) => {
            if (!chatopsRoom) {
                chatopsRoom = wechaty.Room.load(config.room);
                try {
                    await chatopsRoom.ready();
                }
                catch (e) {
                    wechaty_1.log.error('WechatyPluginContrib', 'ChatOps() ChatOpsPlugin(%s) chatopsRoom.ready() rejection: %s', wechaty, e);
                }
            }
            if (await isMatch(message)) {
                try {
                    await chatopsRoom.say(message.toString());
                }
                catch (e) {
                    wechaty_1.log.error('WechatyPluginContrib', 'ChatOps() ChatOpsPlugin(%s) rejection: %s', wechaty, e);
                }
            }
        });
    };
}
exports.ChatOps = ChatOps;
//# sourceMappingURL=chatops.js.map