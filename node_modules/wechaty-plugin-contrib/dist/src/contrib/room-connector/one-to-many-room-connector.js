"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OneToManyRoomConnector = exports.isMatchConfig = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: May 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../../matchers/mod");
const mod_2 = require("../../mappers/mod");
const mod_3 = require("../../talkers/mod");
const isMatchConfig = (config) => {
    wechaty_1.log.verbose('WechatyPluginContrib', 'OneToManyRoomConnector() isMatchConfig(%s)', JSON.stringify(config));
    const matchWhitelist = mod_1.messageMatcher(config.whitelist);
    const matchBlacklist = mod_1.messageMatcher(config.blacklist);
    return async function isMatch(message) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'OneToManyRoomConnector() isMatchConfig() isMatch(%s)', message.toString());
        if (message.self()) {
            return;
        }
        const room = message.room();
        if (!room || room.id !== config.one) {
            return;
        }
        if (await matchWhitelist(message)) {
            return true;
        }
        if (await matchBlacklist(message)) {
            return false;
        }
        return true;
    };
};
exports.isMatchConfig = isMatchConfig;
function OneToManyRoomConnector(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'OneToManyRoomConnector(%s)', JSON.stringify(config));
    const isMatch = exports.isMatchConfig(config);
    const mapMessage = mod_2.messageMapper(config.map);
    const matchAndForward = async (message, roomList) => {
        const match = await isMatch(message);
        if (!match) {
            return;
        }
        try {
            const msgList = await mapMessage(message);
            const talkRoom = mod_3.roomTalker(msgList);
            for (const room of roomList) {
                await talkRoom(room);
                await room.wechaty.sleep(1000);
            }
        }
        catch (e) {
            wechaty_1.log.error('WechatyPluginContrib', 'OneToManyRoomConnector() filterThenToManyRoom(%s, %s) rejection: %s', message, roomList.join(','), e);
        }
    };
    return function OneToManyRoomConnectorPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'OneToManyRoomConnectorPlugin(%s) installing ...', wechaty);
        let manyRoomList;
        wechaty.once('message', async (onceMsg) => {
            wechaty_1.log.verbose('WechatyPluginContrib', 'OneToManyRoomConnectorPlugin(%s) once(message) installing ...', wechaty);
            if (!manyRoomList) {
                manyRoomList = config.many.map(id => wechaty.Room.load(id)); // await loadRoom(wechaty, config.many)
            }
            await matchAndForward(onceMsg, manyRoomList);
            wechaty.on('message', message => matchAndForward(message, manyRoomList));
        });
    };
}
exports.OneToManyRoomConnector = OneToManyRoomConnector;
//# sourceMappingURL=one-to-many-room-connector.js.map