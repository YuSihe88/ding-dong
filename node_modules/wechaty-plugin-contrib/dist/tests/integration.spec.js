#!/usr/bin/env ts-node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const plugins = __importStar(require("../src/mod"));
const wechaty_1 = require("wechaty");
const wechaty_puppet_mock_1 = require("wechaty-puppet-mock");
tstest_1.test('integration testing', async (t) => {
    const bot = wechaty_1.Wechaty.instance({
        puppet: new wechaty_puppet_mock_1.PuppetMock(),
    }).use(plugins.DingDong());
    t.ok(bot, 'should get a bot');
});
tstest_1.test('plugin name', async (t) => {
    for (const plugin of Object.values(plugins)) {
        if (typeof plugin !== 'function') {
            continue;
        }
        if (plugin.name === 'validatePlugin') {
            continue; // our helper functions
        }
        t.doesNotThrow(() => plugins.validatePlugin(plugin), 'plugin ' + plugin.name + ' should be valid');
    }
});
//# sourceMappingURL=integration.spec.js.map