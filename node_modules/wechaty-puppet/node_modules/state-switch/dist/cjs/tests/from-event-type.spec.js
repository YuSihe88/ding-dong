#!/usr/bin/env node --loader ts-node/esm
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const tsd_1 = require("tsd");
const rxjs_1 = require("rxjs");
const state_switch_js_1 = require("../src/state-switch.js");
tstest_1.test('StateSwitch satisfy DOM EventTarget: HasEventTargetAddRemove', async (t) => {
    const state = new state_switch_js_1.StateSwitch();
    tsd_1.expectAssignable(state);
    t.pass('expectAssignable match listener argument typings');
});
tstest_1.test('RxJS: fromEvent type inference', async (t) => {
    const state = new state_switch_js_1.StateSwitch();
    const event$ = rxjs_1.fromEvent(state, 'on');
    tsd_1.expectType(event$);
    const future = rxjs_1.firstValueFrom(event$);
    state.on('pending');
    const result = await future;
    tsd_1.expectType(result);
});
tstest_1.test('RxJS: fromEvent stream for the second value', async (t) => {
    const state = new state_switch_js_1.StateSwitch();
    const event$ = rxjs_1.fromEvent(state, 'off');
    state.off('pending');
    const future = rxjs_1.firstValueFrom(event$);
    state.off(true);
    const result = await future;
    t.equal(result, true, 'should get "true" result');
});
//# sourceMappingURL=from-event-type.spec.js.map