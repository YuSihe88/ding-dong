#!/usr/bin/env node --no-warnings --loader ts-node/esm
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const tsd_1 = require("tsd");
const rxjs_1 = require("rxjs");
const mod_js_1 = require("../src/mod.js");
const puppet_test_js_1 = require("./fixtures/puppet-test/puppet-test.js");
tstest_1.test('Puppet satisfy DOM EventTarget: HasEventTargetAddRemove', async (t) => {
    const puppet = new puppet_test_js_1.PuppetTest();
    tsd_1.expectAssignable(puppet);
    t.pass('expectAssignable match listener argument typings');
});
tstest_1.test('RxJS: fromEvent type inference', async (t) => {
    const puppet = new puppet_test_js_1.PuppetTest();
    // FIXME(202106): get inference from on/off typings
    const event$ = rxjs_1.fromEvent(puppet, 'scan');
    tsd_1.expectType(event$);
    const future = rxjs_1.firstValueFrom(event$);
    const payload = {
        status: mod_js_1.ScanStatus.Unknown,
    };
    puppet.emit('scan', payload);
    const result = await future;
    tsd_1.expectType(result);
    t.same(result, payload, 'should get scan payload');
});
//# sourceMappingURL=from-event-type.spec.js.map